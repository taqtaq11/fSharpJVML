//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 D:\\fsharp_compiler\\fsharp_ss.g 2015-10-19 01:09:30

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  fsharp_ss 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class fsharp_ssLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int AND=4;
	public const int ARGS=5;
	public const int ASSIGN=6;
	public const int BODY=7;
	public const int BOOL_KW=8;
	public const int CHAR=9;
	public const int CHAR_KW=10;
	public const int DIV=11;
	public const int DOUBLE=12;
	public const int DOUBLE_KW=13;
	public const int ELIF=14;
	public const int ELSE=15;
	public const int EQ=16;
	public const int ESC_SEQ=17;
	public const int EXPONENT=18;
	public const int FALSE=19;
	public const int FUN=20;
	public const int FUNCTION_CALL=21;
	public const int FUNCTION_DEFN=22;
	public const int FUN_DEF=23;
	public const int GE=24;
	public const int GT=25;
	public const int HEX_DIGIT=26;
	public const int ID=27;
	public const int IF=28;
	public const int INT=29;
	public const int INT_KW=30;
	public const int LE=31;
	public const int LET=32;
	public const int LT=33;
	public const int MATCH=34;
	public const int MINUS=35;
	public const int MOD=36;
	public const int MULT=37;
	public const int MUTABLE=38;
	public const int NEQ=39;
	public const int OCTAL_ESC=40;
	public const int OR=41;
	public const int PIPE=42;
	public const int PLUS=43;
	public const int PRINTF=44;
	public const int REC=45;
	public const int STRING=46;
	public const int STRING_KW=47;
	public const int THEN=48;
	public const int TRUE=49;
	public const int TYPE=50;
	public const int UNICODE_ESC=51;
	public const int UNKNOWN=52;
	public const int VALUE_DEFN=53;
	public const int WHEN=54;
	const int HIDDEN = Hidden;

	// delegates
	// delegators

	public fsharp_ssLexer()
	{
		OnCreated();
	}

	public fsharp_ssLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public fsharp_ssLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\fsharp_compiler\\fsharp_ss.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:10:5: ( '&&' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:10:7: '&&'
			{
			DebugLocation(10, 7);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ARGS();
	partial void LeaveRule_ARGS();

	// $ANTLR start "ARGS"
	[GrammarRule("ARGS")]
	private void mARGS()
	{
		EnterRule_ARGS();
		EnterRule("ARGS", 2);
		TraceIn("ARGS", 2);
		try
		{
			int _type = ARGS;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:11:6: ( 'ARGS' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:11:8: 'ARGS'
			{
			DebugLocation(11, 8);
			Match("ARGS"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARGS", 2);
			LeaveRule("ARGS", 2);
			LeaveRule_ARGS();
		}
	}
	// $ANTLR end "ARGS"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 3);
		TraceIn("ASSIGN", 3);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:12:8: ( '<-' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:12:10: '<-'
			{
			DebugLocation(12, 10);
			Match("<-"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 3);
			LeaveRule("ASSIGN", 3);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BODY();
	partial void LeaveRule_BODY();

	// $ANTLR start "BODY"
	[GrammarRule("BODY")]
	private void mBODY()
	{
		EnterRule_BODY();
		EnterRule("BODY", 4);
		TraceIn("BODY", 4);
		try
		{
			int _type = BODY;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:13:6: ( 'BODY' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:13:8: 'BODY'
			{
			DebugLocation(13, 8);
			Match("BODY"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BODY", 4);
			LeaveRule("BODY", 4);
			LeaveRule_BODY();
		}
	}
	// $ANTLR end "BODY"

	partial void EnterRule_BOOL_KW();
	partial void LeaveRule_BOOL_KW();

	// $ANTLR start "BOOL_KW"
	[GrammarRule("BOOL_KW")]
	private void mBOOL_KW()
	{
		EnterRule_BOOL_KW();
		EnterRule("BOOL_KW", 5);
		TraceIn("BOOL_KW", 5);
		try
		{
			int _type = BOOL_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:14:9: ( 'bool' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:14:11: 'bool'
			{
			DebugLocation(14, 11);
			Match("bool"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL_KW", 5);
			LeaveRule("BOOL_KW", 5);
			LeaveRule_BOOL_KW();
		}
	}
	// $ANTLR end "BOOL_KW"

	partial void EnterRule_CHAR_KW();
	partial void LeaveRule_CHAR_KW();

	// $ANTLR start "CHAR_KW"
	[GrammarRule("CHAR_KW")]
	private void mCHAR_KW()
	{
		EnterRule_CHAR_KW();
		EnterRule("CHAR_KW", 6);
		TraceIn("CHAR_KW", 6);
		try
		{
			int _type = CHAR_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:15:9: ( 'char' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:15:11: 'char'
			{
			DebugLocation(15, 11);
			Match("char"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR_KW", 6);
			LeaveRule("CHAR_KW", 6);
			LeaveRule_CHAR_KW();
		}
	}
	// $ANTLR end "CHAR_KW"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 7);
		TraceIn("DIV", 7);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:16:5: ( '/' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:16:7: '/'
			{
			DebugLocation(16, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 7);
			LeaveRule("DIV", 7);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_DOUBLE_KW();
	partial void LeaveRule_DOUBLE_KW();

	// $ANTLR start "DOUBLE_KW"
	[GrammarRule("DOUBLE_KW")]
	private void mDOUBLE_KW()
	{
		EnterRule_DOUBLE_KW();
		EnterRule("DOUBLE_KW", 8);
		TraceIn("DOUBLE_KW", 8);
		try
		{
			int _type = DOUBLE_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:17:11: ( 'double' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:17:13: 'double'
			{
			DebugLocation(17, 13);
			Match("double"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE_KW", 8);
			LeaveRule("DOUBLE_KW", 8);
			LeaveRule_DOUBLE_KW();
		}
	}
	// $ANTLR end "DOUBLE_KW"

	partial void EnterRule_ELIF();
	partial void LeaveRule_ELIF();

	// $ANTLR start "ELIF"
	[GrammarRule("ELIF")]
	private void mELIF()
	{
		EnterRule_ELIF();
		EnterRule("ELIF", 9);
		TraceIn("ELIF", 9);
		try
		{
			int _type = ELIF;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:18:6: ( 'elif' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:18:8: 'elif'
			{
			DebugLocation(18, 8);
			Match("elif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELIF", 9);
			LeaveRule("ELIF", 9);
			LeaveRule_ELIF();
		}
	}
	// $ANTLR end "ELIF"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 10);
		TraceIn("ELSE", 10);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:19:6: ( 'else' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:19:8: 'else'
			{
			DebugLocation(19, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 10);
			LeaveRule("ELSE", 10);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 11);
		TraceIn("EQ", 11);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:20:4: ( '=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:20:6: '='
			{
			DebugLocation(20, 6);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 11);
			LeaveRule("EQ", 11);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 12);
		TraceIn("FALSE", 12);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:21:7: ( 'false' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:21:9: 'false'
			{
			DebugLocation(21, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 12);
			LeaveRule("FALSE", 12);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_FUN();
	partial void LeaveRule_FUN();

	// $ANTLR start "FUN"
	[GrammarRule("FUN")]
	private void mFUN()
	{
		EnterRule_FUN();
		EnterRule("FUN", 13);
		TraceIn("FUN", 13);
		try
		{
			int _type = FUN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:22:5: ( 'fun' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:22:7: 'fun'
			{
			DebugLocation(22, 7);
			Match("fun"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUN", 13);
			LeaveRule("FUN", 13);
			LeaveRule_FUN();
		}
	}
	// $ANTLR end "FUN"

	partial void EnterRule_FUNCTION_CALL();
	partial void LeaveRule_FUNCTION_CALL();

	// $ANTLR start "FUNCTION_CALL"
	[GrammarRule("FUNCTION_CALL")]
	private void mFUNCTION_CALL()
	{
		EnterRule_FUNCTION_CALL();
		EnterRule("FUNCTION_CALL", 14);
		TraceIn("FUNCTION_CALL", 14);
		try
		{
			int _type = FUNCTION_CALL;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:23:15: ( 'FUNCTION_CALL' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:23:17: 'FUNCTION_CALL'
			{
			DebugLocation(23, 17);
			Match("FUNCTION_CALL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION_CALL", 14);
			LeaveRule("FUNCTION_CALL", 14);
			LeaveRule_FUNCTION_CALL();
		}
	}
	// $ANTLR end "FUNCTION_CALL"

	partial void EnterRule_FUNCTION_DEFN();
	partial void LeaveRule_FUNCTION_DEFN();

	// $ANTLR start "FUNCTION_DEFN"
	[GrammarRule("FUNCTION_DEFN")]
	private void mFUNCTION_DEFN()
	{
		EnterRule_FUNCTION_DEFN();
		EnterRule("FUNCTION_DEFN", 15);
		TraceIn("FUNCTION_DEFN", 15);
		try
		{
			int _type = FUNCTION_DEFN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:24:15: ( 'FUNCTION_DEFN' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:24:17: 'FUNCTION_DEFN'
			{
			DebugLocation(24, 17);
			Match("FUNCTION_DEFN"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION_DEFN", 15);
			LeaveRule("FUNCTION_DEFN", 15);
			LeaveRule_FUNCTION_DEFN();
		}
	}
	// $ANTLR end "FUNCTION_DEFN"

	partial void EnterRule_FUN_DEF();
	partial void LeaveRule_FUN_DEF();

	// $ANTLR start "FUN_DEF"
	[GrammarRule("FUN_DEF")]
	private void mFUN_DEF()
	{
		EnterRule_FUN_DEF();
		EnterRule("FUN_DEF", 16);
		TraceIn("FUN_DEF", 16);
		try
		{
			int _type = FUN_DEF;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:25:9: ( '->' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:25:11: '->'
			{
			DebugLocation(25, 11);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUN_DEF", 16);
			LeaveRule("FUN_DEF", 16);
			LeaveRule_FUN_DEF();
		}
	}
	// $ANTLR end "FUN_DEF"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 17);
		TraceIn("GE", 17);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:26:4: ( '>=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:26:6: '>='
			{
			DebugLocation(26, 6);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 17);
			LeaveRule("GE", 17);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 18);
		TraceIn("GT", 18);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:27:4: ( '>' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:27:6: '>'
			{
			DebugLocation(27, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 18);
			LeaveRule("GT", 18);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 19);
		TraceIn("IF", 19);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:28:4: ( 'if' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:28:6: 'if'
			{
			DebugLocation(28, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 19);
			LeaveRule("IF", 19);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_INT_KW();
	partial void LeaveRule_INT_KW();

	// $ANTLR start "INT_KW"
	[GrammarRule("INT_KW")]
	private void mINT_KW()
	{
		EnterRule_INT_KW();
		EnterRule("INT_KW", 20);
		TraceIn("INT_KW", 20);
		try
		{
			int _type = INT_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:29:8: ( 'int' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:29:10: 'int'
			{
			DebugLocation(29, 10);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT_KW", 20);
			LeaveRule("INT_KW", 20);
			LeaveRule_INT_KW();
		}
	}
	// $ANTLR end "INT_KW"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 21);
		TraceIn("LE", 21);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:30:4: ( '<=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:30:6: '<='
			{
			DebugLocation(30, 6);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 21);
			LeaveRule("LE", 21);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 22);
		TraceIn("LET", 22);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:31:5: ( 'let' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:31:7: 'let'
			{
			DebugLocation(31, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 22);
			LeaveRule("LET", 22);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 23);
		TraceIn("LT", 23);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:32:4: ( '<' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:32:6: '<'
			{
			DebugLocation(32, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 23);
			LeaveRule("LT", 23);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_MATCH();
	partial void LeaveRule_MATCH();

	// $ANTLR start "MATCH"
	[GrammarRule("MATCH")]
	private void mMATCH()
	{
		EnterRule_MATCH();
		EnterRule("MATCH", 24);
		TraceIn("MATCH", 24);
		try
		{
			int _type = MATCH;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:33:7: ( 'match' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:33:9: 'match'
			{
			DebugLocation(33, 9);
			Match("match"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MATCH", 24);
			LeaveRule("MATCH", 24);
			LeaveRule_MATCH();
		}
	}
	// $ANTLR end "MATCH"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 25);
		TraceIn("MINUS", 25);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:34:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:34:9: '-'
			{
			DebugLocation(34, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 25);
			LeaveRule("MINUS", 25);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 26);
		TraceIn("MOD", 26);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:35:5: ( '%' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:35:7: '%'
			{
			DebugLocation(35, 7);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 26);
			LeaveRule("MOD", 26);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 27);
		TraceIn("MULT", 27);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:36:6: ( '*' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:36:8: '*'
			{
			DebugLocation(36, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 27);
			LeaveRule("MULT", 27);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_MUTABLE();
	partial void LeaveRule_MUTABLE();

	// $ANTLR start "MUTABLE"
	[GrammarRule("MUTABLE")]
	private void mMUTABLE()
	{
		EnterRule_MUTABLE();
		EnterRule("MUTABLE", 28);
		TraceIn("MUTABLE", 28);
		try
		{
			int _type = MUTABLE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:37:9: ( 'mutable' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:37:11: 'mutable'
			{
			DebugLocation(37, 11);
			Match("mutable"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUTABLE", 28);
			LeaveRule("MUTABLE", 28);
			LeaveRule_MUTABLE();
		}
	}
	// $ANTLR end "MUTABLE"

	partial void EnterRule_NEQ();
	partial void LeaveRule_NEQ();

	// $ANTLR start "NEQ"
	[GrammarRule("NEQ")]
	private void mNEQ()
	{
		EnterRule_NEQ();
		EnterRule("NEQ", 29);
		TraceIn("NEQ", 29);
		try
		{
			int _type = NEQ;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:38:5: ( '!=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:38:7: '!='
			{
			DebugLocation(38, 7);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEQ", 29);
			LeaveRule("NEQ", 29);
			LeaveRule_NEQ();
		}
	}
	// $ANTLR end "NEQ"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 30);
		TraceIn("OR", 30);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:39:4: ( '||' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:39:6: '||'
			{
			DebugLocation(39, 6);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 30);
			LeaveRule("OR", 30);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PIPE();
	partial void LeaveRule_PIPE();

	// $ANTLR start "PIPE"
	[GrammarRule("PIPE")]
	private void mPIPE()
	{
		EnterRule_PIPE();
		EnterRule("PIPE", 31);
		TraceIn("PIPE", 31);
		try
		{
			int _type = PIPE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:40:6: ( '|>' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:40:8: '|>'
			{
			DebugLocation(40, 8);
			Match("|>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PIPE", 31);
			LeaveRule("PIPE", 31);
			LeaveRule_PIPE();
		}
	}
	// $ANTLR end "PIPE"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 32);
		TraceIn("PLUS", 32);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:41:6: ( '+' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:41:8: '+'
			{
			DebugLocation(41, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 32);
			LeaveRule("PLUS", 32);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_PRINTF();
	partial void LeaveRule_PRINTF();

	// $ANTLR start "PRINTF"
	[GrammarRule("PRINTF")]
	private void mPRINTF()
	{
		EnterRule_PRINTF();
		EnterRule("PRINTF", 33);
		TraceIn("PRINTF", 33);
		try
		{
			int _type = PRINTF;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:42:8: ( 'printf' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:42:10: 'printf'
			{
			DebugLocation(42, 10);
			Match("printf"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PRINTF", 33);
			LeaveRule("PRINTF", 33);
			LeaveRule_PRINTF();
		}
	}
	// $ANTLR end "PRINTF"

	partial void EnterRule_REC();
	partial void LeaveRule_REC();

	// $ANTLR start "REC"
	[GrammarRule("REC")]
	private void mREC()
	{
		EnterRule_REC();
		EnterRule("REC", 34);
		TraceIn("REC", 34);
		try
		{
			int _type = REC;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:43:5: ( 'rec' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:43:7: 'rec'
			{
			DebugLocation(43, 7);
			Match("rec"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REC", 34);
			LeaveRule("REC", 34);
			LeaveRule_REC();
		}
	}
	// $ANTLR end "REC"

	partial void EnterRule_STRING_KW();
	partial void LeaveRule_STRING_KW();

	// $ANTLR start "STRING_KW"
	[GrammarRule("STRING_KW")]
	private void mSTRING_KW()
	{
		EnterRule_STRING_KW();
		EnterRule("STRING_KW", 35);
		TraceIn("STRING_KW", 35);
		try
		{
			int _type = STRING_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:44:11: ( 'string' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:44:13: 'string'
			{
			DebugLocation(44, 13);
			Match("string"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_KW", 35);
			LeaveRule("STRING_KW", 35);
			LeaveRule_STRING_KW();
		}
	}
	// $ANTLR end "STRING_KW"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 36);
		TraceIn("THEN", 36);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:45:6: ( 'then' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:45:8: 'then'
			{
			DebugLocation(45, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 36);
			LeaveRule("THEN", 36);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 37);
		TraceIn("TRUE", 37);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:46:6: ( 'true' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:46:8: 'true'
			{
			DebugLocation(46, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 37);
			LeaveRule("TRUE", 37);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 38);
		TraceIn("TYPE", 38);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:47:6: ( 'TYPE' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:47:8: 'TYPE'
			{
			DebugLocation(47, 8);
			Match("TYPE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 38);
			LeaveRule("TYPE", 38);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_VALUE_DEFN();
	partial void LeaveRule_VALUE_DEFN();

	// $ANTLR start "VALUE_DEFN"
	[GrammarRule("VALUE_DEFN")]
	private void mVALUE_DEFN()
	{
		EnterRule_VALUE_DEFN();
		EnterRule("VALUE_DEFN", 39);
		TraceIn("VALUE_DEFN", 39);
		try
		{
			int _type = VALUE_DEFN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:48:12: ( 'VALUE_DEFN' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:48:14: 'VALUE_DEFN'
			{
			DebugLocation(48, 14);
			Match("VALUE_DEFN"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VALUE_DEFN", 39);
			LeaveRule("VALUE_DEFN", 39);
			LeaveRule_VALUE_DEFN();
		}
	}
	// $ANTLR end "VALUE_DEFN"

	partial void EnterRule_WHEN();
	partial void LeaveRule_WHEN();

	// $ANTLR start "WHEN"
	[GrammarRule("WHEN")]
	private void mWHEN()
	{
		EnterRule_WHEN();
		EnterRule("WHEN", 40);
		TraceIn("WHEN", 40);
		try
		{
			int _type = WHEN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:49:6: ( 'when' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:49:8: 'when'
			{
			DebugLocation(49, 8);
			Match("when"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHEN", 40);
			LeaveRule("WHEN", 40);
			LeaveRule_WHEN();
		}
	}
	// $ANTLR end "WHEN"

	partial void EnterRule_T__55();
	partial void LeaveRule_T__55();

	// $ANTLR start "T__55"
	[GrammarRule("T__55")]
	private void mT__55()
	{
		EnterRule_T__55();
		EnterRule("T__55", 41);
		TraceIn("T__55", 41);
		try
		{
			int _type = T__55;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:50:7: ( '(' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:50:9: '('
			{
			DebugLocation(50, 9);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__55", 41);
			LeaveRule("T__55", 41);
			LeaveRule_T__55();
		}
	}
	// $ANTLR end "T__55"

	partial void EnterRule_T__56();
	partial void LeaveRule_T__56();

	// $ANTLR start "T__56"
	[GrammarRule("T__56")]
	private void mT__56()
	{
		EnterRule_T__56();
		EnterRule("T__56", 42);
		TraceIn("T__56", 42);
		try
		{
			int _type = T__56;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:51:7: ( ')' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:51:9: ')'
			{
			DebugLocation(51, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__56", 42);
			LeaveRule("T__56", 42);
			LeaveRule_T__56();
		}
	}
	// $ANTLR end "T__56"

	partial void EnterRule_T__57();
	partial void LeaveRule_T__57();

	// $ANTLR start "T__57"
	[GrammarRule("T__57")]
	private void mT__57()
	{
		EnterRule_T__57();
		EnterRule("T__57", 43);
		TraceIn("T__57", 43);
		try
		{
			int _type = T__57;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:52:7: ( ':' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:52:9: ':'
			{
			DebugLocation(52, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__57", 43);
			LeaveRule("T__57", 43);
			LeaveRule_T__57();
		}
	}
	// $ANTLR end "T__57"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 44);
		TraceIn("ID", 44);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:58:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:58:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(58, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(58, 31);
			// D:\\fsharp_compiler\\fsharp_ss.g:58:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:
					{
					DebugLocation(58, 31);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 44);
			LeaveRule("ID", 44);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 45);
		TraceIn("INT", 45);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:61:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:61:7: ( '0' .. '9' )+
			{
			DebugLocation(61, 7);
			// D:\\fsharp_compiler\\fsharp_ss.g:61:7: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='0' && LA2_1<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:
					{
					DebugLocation(61, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 45);
			LeaveRule("INT", 45);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_DOUBLE();
	partial void LeaveRule_DOUBLE();

	// $ANTLR start "DOUBLE"
	[GrammarRule("DOUBLE")]
	private void mDOUBLE()
	{
		EnterRule_DOUBLE();
		EnterRule("DOUBLE", 46);
		TraceIn("DOUBLE", 46);
		try
		{
			int _type = DOUBLE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:64:8: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			try
			{
				alt9 = dfa9.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:64:12: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(64, 12);
				// D:\\fsharp_compiler\\fsharp_ss.g:64:12: ( '0' .. '9' )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if (((LA3_1>='0' && LA3_1<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(64, 12);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(64, 24);
				Match('.'); 
				DebugLocation(64, 28);
				// D:\\fsharp_compiler\\fsharp_ss.g:64:28: ( '0' .. '9' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if (((LA4_1>='0' && LA4_1<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(64, 28);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(64, 40);
				// D:\\fsharp_compiler\\fsharp_ss.g:64:40: ( EXPONENT )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='E'||LA5_1=='e'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:64:40: EXPONENT
					{
					DebugLocation(64, 40);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:65:6: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(65, 6);
				Match('.'); 
				DebugLocation(65, 10);
				// D:\\fsharp_compiler\\fsharp_ss.g:65:10: ( '0' .. '9' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if (((LA6_1>='0' && LA6_1<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(65, 10);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(65, 22);
				// D:\\fsharp_compiler\\fsharp_ss.g:65:22: ( EXPONENT )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1=='E'||LA7_1=='e'))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:65:22: EXPONENT
					{
					DebugLocation(65, 22);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\fsharp_compiler\\fsharp_ss.g:66:13: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(66, 13);
				// D:\\fsharp_compiler\\fsharp_ss.g:66:13: ( '0' .. '9' )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if (((LA8_1>='0' && LA8_1<='9')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(66, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(66, 25);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE", 46);
			LeaveRule("DOUBLE", 46);
			LeaveRule_DOUBLE();
		}
	}
	// $ANTLR end "DOUBLE"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 47);
		TraceIn("EXPONENT", 47);
		try
		{
			int _type = EXPONENT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:69:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:69:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(69, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(69, 22);
			// D:\\fsharp_compiler\\fsharp_ss.g:69:22: ( '+' | '-' )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1=='+'||LA10_1=='-'))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:
				{
				DebugLocation(69, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(69, 33);
			// D:\\fsharp_compiler\\fsharp_ss.g:69:33: ( '0' .. '9' )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if (((LA11_1>='0' && LA11_1<='9')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:
					{
					DebugLocation(69, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXPONENT", 47);
			LeaveRule("EXPONENT", 47);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 48);
		TraceIn("STRING", 48);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:72:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:72:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(72, 8);
			Match('\"'); 
			DebugLocation(72, 12);
			// D:\\fsharp_compiler\\fsharp_ss.g:72:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=3;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1=='\\'))
				{
					alt12 = 1;
				}
				else if (((LA12_1>='\u0000' && LA12_1<='!')||(LA12_1>='#' && LA12_1<='[')||(LA12_1>=']' && LA12_1<='\uFFFF')))
				{
					alt12 = 2;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:72:14: ESC_SEQ
					{
					DebugLocation(72, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\fsharp_compiler\\fsharp_ss.g:72:24: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(72, 24);
					input.Consume();


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(72, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 48);
			LeaveRule("STRING", 48);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 49);
		TraceIn("CHAR", 49);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:75:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:75:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(75, 8);
			Match('\''); 
			DebugLocation(75, 13);
			// D:\\fsharp_compiler\\fsharp_ss.g:75:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1=='\\'))
			{
				alt13 = 1;
			}
			else if (((LA13_1>='\u0000' && LA13_1<='&')||(LA13_1>='(' && LA13_1<='[')||(LA13_1>=']' && LA13_1<='\uFFFF')))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:75:15: ESC_SEQ
				{
				DebugLocation(75, 15);
				mESC_SEQ(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:75:25: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(75, 25);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(75, 40);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 49);
			LeaveRule("CHAR", 49);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 50);
		TraceIn("HEX_DIGIT", 50);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:80:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:
			{
			DebugLocation(80, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 50);
			LeaveRule("HEX_DIGIT", 50);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 51);
		TraceIn("ESC_SEQ", 51);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:84:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt14 = 1;
					}
					break;
				case 'u':
					{
					alt14 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt14 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:84:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(84, 9);
				Match('\\'); 
				DebugLocation(84, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:85:9: UNICODE_ESC
				{
				DebugLocation(85, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\fsharp_compiler\\fsharp_ss.g:86:9: OCTAL_ESC
				{
				DebugLocation(86, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 51);
			LeaveRule("ESC_SEQ", 51);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 52);
		TraceIn("OCTAL_ESC", 52);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:91:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1=='\\'))
			{
				int LA15_2 = input.LA(2);

				if (((LA15_2>='0' && LA15_2<='3')))
				{
					int LA15_3 = input.LA(3);

					if (((LA15_3>='0' && LA15_3<='7')))
					{
						int LA15_4 = input.LA(4);

						if (((LA15_4>='0' && LA15_4<='7')))
						{
							alt15 = 1;
						}
						else
						{
							alt15 = 2;
						}
					}
					else
					{
						alt15 = 3;
					}
				}
				else if (((LA15_2>='4' && LA15_2<='7')))
				{
					int LA15_3 = input.LA(3);

					if (((LA15_3>='0' && LA15_3<='7')))
					{
						alt15 = 2;
					}
					else
					{
						alt15 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:91:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(91, 9);
				Match('\\'); 
				DebugLocation(91, 14);
				input.Consume();

				DebugLocation(91, 25);
				input.Consume();

				DebugLocation(91, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:92:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(92, 9);
				Match('\\'); 
				DebugLocation(92, 14);
				input.Consume();

				DebugLocation(92, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\fsharp_compiler\\fsharp_ss.g:93:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(93, 9);
				Match('\\'); 
				DebugLocation(93, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 52);
			LeaveRule("OCTAL_ESC", 52);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 53);
		TraceIn("UNICODE_ESC", 53);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:98:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:98:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(98, 9);
			Match('\\'); 
			DebugLocation(98, 14);
			Match('u'); 
			DebugLocation(98, 18);
			mHEX_DIGIT(); 
			DebugLocation(98, 28);
			mHEX_DIGIT(); 
			DebugLocation(98, 38);
			mHEX_DIGIT(); 
			DebugLocation(98, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 53);
			LeaveRule("UNICODE_ESC", 53);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// D:\\fsharp_compiler\\fsharp_ss.g:1:8: ( AND | ARGS | ASSIGN | BODY | BOOL_KW | CHAR_KW | DIV | DOUBLE_KW | ELIF | ELSE | EQ | FALSE | FUN | FUNCTION_CALL | FUNCTION_DEFN | FUN_DEF | GE | GT | IF | INT_KW | LE | LET | LT | MATCH | MINUS | MOD | MULT | MUTABLE | NEQ | OR | PIPE | PLUS | PRINTF | REC | STRING_KW | THEN | TRUE | TYPE | VALUE_DEFN | WHEN | T__55 | T__56 | T__57 | ID | INT | DOUBLE | EXPONENT | STRING | CHAR )
		int alt16=49;
		try { DebugEnterDecision(16, false);
		try
		{
			alt16 = dfa16.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(16); }
		switch (alt16)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:14: ARGS
			{
			DebugLocation(1, 14);
			mARGS(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:19: ASSIGN
			{
			DebugLocation(1, 19);
			mASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:26: BODY
			{
			DebugLocation(1, 26);
			mBODY(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:31: BOOL_KW
			{
			DebugLocation(1, 31);
			mBOOL_KW(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:39: CHAR_KW
			{
			DebugLocation(1, 39);
			mCHAR_KW(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:47: DIV
			{
			DebugLocation(1, 47);
			mDIV(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:51: DOUBLE_KW
			{
			DebugLocation(1, 51);
			mDOUBLE_KW(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:61: ELIF
			{
			DebugLocation(1, 61);
			mELIF(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:66: ELSE
			{
			DebugLocation(1, 66);
			mELSE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:71: EQ
			{
			DebugLocation(1, 71);
			mEQ(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:74: FALSE
			{
			DebugLocation(1, 74);
			mFALSE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:80: FUN
			{
			DebugLocation(1, 80);
			mFUN(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:84: FUNCTION_CALL
			{
			DebugLocation(1, 84);
			mFUNCTION_CALL(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:98: FUNCTION_DEFN
			{
			DebugLocation(1, 98);
			mFUNCTION_DEFN(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:112: FUN_DEF
			{
			DebugLocation(1, 112);
			mFUN_DEF(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:120: GE
			{
			DebugLocation(1, 120);
			mGE(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:123: GT
			{
			DebugLocation(1, 123);
			mGT(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:126: IF
			{
			DebugLocation(1, 126);
			mIF(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:129: INT_KW
			{
			DebugLocation(1, 129);
			mINT_KW(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:136: LE
			{
			DebugLocation(1, 136);
			mLE(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:139: LET
			{
			DebugLocation(1, 139);
			mLET(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:143: LT
			{
			DebugLocation(1, 143);
			mLT(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:146: MATCH
			{
			DebugLocation(1, 146);
			mMATCH(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:152: MINUS
			{
			DebugLocation(1, 152);
			mMINUS(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:158: MOD
			{
			DebugLocation(1, 158);
			mMOD(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:162: MULT
			{
			DebugLocation(1, 162);
			mMULT(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:167: MUTABLE
			{
			DebugLocation(1, 167);
			mMUTABLE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:175: NEQ
			{
			DebugLocation(1, 175);
			mNEQ(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:179: OR
			{
			DebugLocation(1, 179);
			mOR(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:182: PIPE
			{
			DebugLocation(1, 182);
			mPIPE(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:187: PLUS
			{
			DebugLocation(1, 187);
			mPLUS(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:192: PRINTF
			{
			DebugLocation(1, 192);
			mPRINTF(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:199: REC
			{
			DebugLocation(1, 199);
			mREC(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:203: STRING_KW
			{
			DebugLocation(1, 203);
			mSTRING_KW(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:213: THEN
			{
			DebugLocation(1, 213);
			mTHEN(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:218: TRUE
			{
			DebugLocation(1, 218);
			mTRUE(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:223: TYPE
			{
			DebugLocation(1, 223);
			mTYPE(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:228: VALUE_DEFN
			{
			DebugLocation(1, 228);
			mVALUE_DEFN(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:239: WHEN
			{
			DebugLocation(1, 239);
			mWHEN(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:244: T__55
			{
			DebugLocation(1, 244);
			mT__55(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:250: T__56
			{
			DebugLocation(1, 250);
			mT__56(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:256: T__57
			{
			DebugLocation(1, 256);
			mT__57(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:262: ID
			{
			DebugLocation(1, 262);
			mID(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:265: INT
			{
			DebugLocation(1, 265);
			mINT(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:269: DOUBLE
			{
			DebugLocation(1, 269);
			mDOUBLE(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:276: EXPONENT
			{
			DebugLocation(1, 276);
			mEXPONENT(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:285: STRING
			{
			DebugLocation(1, 285);
			mSTRING(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:292: CHAR
			{
			DebugLocation(1, 292);
			mCHAR(); 

			}
			break;

		}

	}


	#region DFA
	DFA9 dfa9;
	DFA16 dfa16;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this);
		dfa16 = new DFA16(this);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x5\xFFFF";
		private const string DFA9_eofS =
			"\x5\xFFFF";
		private const string DFA9_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA9_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA9_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA9_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "64:1: DOUBLE : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA16 : DFA
	{
		private const string DFA16_eotS =
			"\x2\xFFFF\x1\x24\x1\x2A\x3\x24\x1\xFFFF\x2\x24\x1\xFFFF\x2\x24\x1\x36"+
			"\x1\x38\x3\x24\x5\xFFFF\x7\x24\x3\xFFFF\x1\x24\x1\x48\x4\xFFFF\x1\x24"+
			"\x3\xFFFF\x6\x24\x1\xFFFF\x3\x24\x4\xFFFF\x1\x53\x4\x24\x2\xFFFF\x8\x24"+
			"\x1\xFFFF\x8\x24\x1\x68\x1\x24\x1\xFFFF\x1\x6A\x1\x6B\x3\x24\x1\x6F\x6"+
			"\x24\x1\x76\x1\x77\x1\x78\x1\x79\x1\x24\x1\x7B\x1\x7C\x1\x24\x1\xFFFF"+
			"\x1\x24\x2\xFFFF\x3\x24\x1\xFFFF\x1\x24\x1\x83\x1\x84\x1\x85\x1\x24\x1"+
			"\x87\x4\xFFFF\x1\x24\x2\xFFFF\x1\x89\x1\x24\x1\x8B\x3\x24\x3\xFFFF\x1"+
			"\x24\x1\xFFFF\x1\x90\x1\xFFFF\x1\x24\x1\xFFFF\x1\x24\x1\x93\x1\x94\x1"+
			"\x24\x1\xFFFF\x1\x24\x1\x97\x2\xFFFF\x2\x24\x1\xFFFF\x5\x24\x1\xA0\x2"+
			"\x24\x1\xFFFF\x2\x24\x1\xA5\x1\xA6\x2\xFFFF";
		private const string DFA16_eofS =
			"\xA7\xFFFF";
		private const string DFA16_minS =
			"\x1\x21\x1\xFFFF\x1\x52\x1\x2D\x1\x4F\x1\x6F\x1\x68\x1\xFFFF\x1\x6F\x1"+
			"\x2B\x1\xFFFF\x1\x61\x1\x55\x1\x3E\x1\x3D\x1\x66\x1\x65\x1\x61\x3\xFFFF"+
			"\x1\x3E\x1\xFFFF\x1\x72\x1\x65\x1\x74\x1\x68\x1\x59\x1\x41\x1\x68\x3"+
			"\xFFFF\x1\x2B\x1\x2E\x4\xFFFF\x1\x47\x3\xFFFF\x1\x44\x1\x6F\x1\x61\x1"+
			"\x75\x1\x69\x1\x30\x1\xFFFF\x1\x6C\x1\x6E\x1\x4E\x4\xFFFF\x1\x30\x4\x74"+
			"\x2\xFFFF\x1\x69\x1\x63\x1\x72\x1\x65\x1\x75\x1\x50\x1\x4C\x1\x65\x1"+
			"\xFFFF\x1\x53\x1\x59\x1\x6C\x1\x72\x1\x62\x1\x66\x1\x65\x1\x73\x1\x30"+
			"\x1\x43\x1\xFFFF\x2\x30\x1\x63\x1\x61\x1\x6E\x1\x30\x1\x69\x1\x6E\x1"+
			"\x65\x1\x45\x1\x55\x1\x6E\x4\x30\x1\x6C\x2\x30\x1\x65\x1\xFFFF\x1\x54"+
			"\x2\xFFFF\x1\x68\x1\x62\x1\x74\x1\xFFFF\x1\x6E\x3\x30\x1\x45\x1\x30\x4"+
			"\xFFFF\x1\x65\x2\xFFFF\x1\x30\x1\x49\x1\x30\x1\x6C\x1\x66\x1\x67\x3\xFFFF"+
			"\x1\x5F\x1\xFFFF\x1\x30\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x65\x2\x30\x1\x44"+
			"\x1\xFFFF\x1\x4E\x1\x30\x2\xFFFF\x1\x45\x1\x5F\x1\xFFFF\x1\x46\x1\x43"+
			"\x1\x4E\x1\x41\x1\x45\x1\x30\x1\x4C\x1\x46\x1\xFFFF\x1\x4C\x1\x4E\x2"+
			"\x30\x2\xFFFF";
		private const string DFA16_maxS =
			"\x1\x7C\x1\xFFFF\x1\x52\x1\x3D\x1\x4F\x1\x6F\x1\x68\x1\xFFFF\x1\x6F\x1"+
			"\x6C\x1\xFFFF\x1\x75\x1\x55\x1\x3E\x1\x3D\x1\x6E\x1\x65\x1\x75\x3\xFFFF"+
			"\x1\x7C\x1\xFFFF\x1\x72\x1\x65\x1\x74\x1\x72\x1\x59\x1\x41\x1\x68\x3"+
			"\xFFFF\x1\x39\x1\x65\x4\xFFFF\x1\x47\x3\xFFFF\x1\x44\x1\x6F\x1\x61\x1"+
			"\x75\x1\x73\x1\x39\x1\xFFFF\x1\x6C\x1\x6E\x1\x4E\x4\xFFFF\x1\x7A\x4\x74"+
			"\x2\xFFFF\x1\x69\x1\x63\x1\x72\x1\x65\x1\x75\x1\x50\x1\x4C\x1\x65\x1"+
			"\xFFFF\x1\x53\x1\x59\x1\x6C\x1\x72\x1\x62\x1\x66\x1\x65\x1\x73\x1\x7A"+
			"\x1\x43\x1\xFFFF\x2\x7A\x1\x63\x1\x61\x1\x6E\x1\x7A\x1\x69\x1\x6E\x1"+
			"\x65\x1\x45\x1\x55\x1\x6E\x4\x7A\x1\x6C\x2\x7A\x1\x65\x1\xFFFF\x1\x54"+
			"\x2\xFFFF\x1\x68\x1\x62\x1\x74\x1\xFFFF\x1\x6E\x3\x7A\x1\x45\x1\x7A\x4"+
			"\xFFFF\x1\x65\x2\xFFFF\x1\x7A\x1\x49\x1\x7A\x1\x6C\x1\x66\x1\x67\x3\xFFFF"+
			"\x1\x5F\x1\xFFFF\x1\x7A\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x65\x2\x7A\x1\x44"+
			"\x1\xFFFF\x1\x4E\x1\x7A\x2\xFFFF\x1\x45\x1\x5F\x1\xFFFF\x1\x46\x1\x44"+
			"\x1\x4E\x1\x41\x1\x45\x1\x7A\x1\x4C\x1\x46\x1\xFFFF\x1\x4C\x1\x4E\x2"+
			"\x7A\x2\xFFFF";
		private const string DFA16_acceptS =
			"\x1\xFFFF\x1\x1\x5\xFFFF\x1\x7\x2\xFFFF\x1\xB\x7\xFFFF\x1\x1A\x1\x1B"+
			"\x1\x1D\x1\xFFFF\x1\x20\x7\xFFFF\x1\x29\x1\x2A\x1\x2B\x2\xFFFF\x1\x2E"+
			"\x1\x2C\x1\x30\x1\x31\x1\xFFFF\x1\x3\x1\x15\x1\x17\x6\xFFFF\x1\x2F\x3"+
			"\xFFFF\x1\x10\x1\x19\x1\x11\x1\x12\x5\xFFFF\x1\x1E\x1\x1F\x8\xFFFF\x1"+
			"\x2D\xA\xFFFF\x1\x13\x14\xFFFF\x1\xD\x1\xFFFF\x1\x14\x1\x16\x3\xFFFF"+
			"\x1\x22\x6\xFFFF\x1\x2\x1\x4\x1\x5\x1\x6\x1\xFFFF\x1\x9\x1\xA\x6\xFFFF"+
			"\x1\x24\x1\x25\x1\x26\x1\xFFFF\x1\x28\x1\xFFFF\x1\xC\x1\xFFFF\x1\x18"+
			"\x4\xFFFF\x1\x8\x2\xFFFF\x1\x21\x1\x23\x2\xFFFF\x1\x1C\x8\xFFFF\x1\x27"+
			"\x4\xFFFF\x1\xE\x1\xF";
		private const string DFA16_specialS =
			"\xA7\xFFFF}>";
		private static readonly string[] DFA16_transitionS =
			{
				"\x1\x14\x1\x25\x2\xFFFF\x1\x12\x1\x1\x1\x26\x1\x1E\x1\x1F\x1\x13\x1"+
				"\x16\x1\xFFFF\x1\xD\x1\x23\x1\x7\xA\x22\x1\x20\x1\xFFFF\x1\x3\x1\xA"+
				"\x1\xE\x2\xFFFF\x1\x2\x1\x4\x2\x24\x1\x21\x1\xC\xD\x24\x1\x1B\x1\x24"+
				"\x1\x1C\x4\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1\x24\x1\x5\x1\x6\x1\x8\x1"+
				"\x9\x1\xB\x2\x24\x1\xF\x2\x24\x1\x10\x1\x11\x2\x24\x1\x17\x1\x24\x1"+
				"\x18\x1\x19\x1\x1A\x2\x24\x1\x1D\x3\x24\x1\xFFFF\x1\x15",
				"",
				"\x1\x27",
				"\x1\x28\xF\xFFFF\x1\x29",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D",
				"",
				"\x1\x2E",
				"\x1\x31\x1\xFFFF\x1\x31\x2\xFFFF\xA\x30\x32\xFFFF\x1\x2F",
				"",
				"\x1\x32\x13\xFFFF\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\x1\x37",
				"\x1\x39\x7\xFFFF\x1\x3A",
				"\x1\x3B",
				"\x1\x3C\x13\xFFFF\x1\x3D",
				"",
				"",
				"",
				"\x1\x3F\x3D\xFFFF\x1\x3E",
				"",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\x1\x43\x9\xFFFF\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"\x1\x47",
				"",
				"",
				"",
				"\x1\x31\x1\xFFFF\x1\x31\x2\xFFFF\xA\x30",
				"\x1\x23\x1\xFFFF\xA\x22\xB\xFFFF\x1\x23\x1F\xFFFF\x1\x23",
				"",
				"",
				"",
				"",
				"\x1\x49",
				"",
				"",
				"",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E\x9\xFFFF\x1\x4F",
				"\xA\x30",
				"",
				"\x1\x50",
				"\x1\x51",
				"\x1\x52",
				"",
				"",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"\x1\x57",
				"",
				"",
				"\x1\x58",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x69",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\x1\x75",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x7A",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x7D",
				"",
				"\x1\x7E",
				"",
				"",
				"\x1\x7F",
				"\x1\x80",
				"\x1\x81",
				"",
				"\x1\x82",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x86",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				"",
				"",
				"\x1\x88",
				"",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x8A",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x8C",
				"\x1\x8D",
				"\x1\x8E",
				"",
				"",
				"",
				"\x1\x8F",
				"",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"\x1\x91",
				"",
				"\x1\x92",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\x95",
				"",
				"\x1\x96",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				"",
				"\x1\x98",
				"\x1\x99",
				"",
				"\x1\x9A",
				"\x1\x9B\x1\x9C",
				"\x1\x9D",
				"\x1\x9E",
				"\x1\x9F",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\x1\xA1",
				"\x1\xA2",
				"",
				"\x1\xA3",
				"\x1\xA4",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"\xA\x24\x7\xFFFF\x1A\x24\x4\xFFFF\x1\x24\x1\xFFFF\x1A\x24",
				"",
				""
			};

		private static readonly short[] DFA16_eot = DFA.UnpackEncodedString(DFA16_eotS);
		private static readonly short[] DFA16_eof = DFA.UnpackEncodedString(DFA16_eofS);
		private static readonly char[] DFA16_min = DFA.UnpackEncodedStringToUnsignedChars(DFA16_minS);
		private static readonly char[] DFA16_max = DFA.UnpackEncodedStringToUnsignedChars(DFA16_maxS);
		private static readonly short[] DFA16_accept = DFA.UnpackEncodedString(DFA16_acceptS);
		private static readonly short[] DFA16_special = DFA.UnpackEncodedString(DFA16_specialS);
		private static readonly short[][] DFA16_transition;

		static DFA16()
		{
			int numStates = DFA16_transitionS.Length;
			DFA16_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA16_transition[i] = DFA.UnpackEncodedString(DFA16_transitionS[i]);
			}
		}

		public DFA16( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 16;
			this.eot = DFA16_eot;
			this.eof = DFA16_eof;
			this.min = DFA16_min;
			this.max = DFA16_max;
			this.accept = DFA16_accept;
			this.special = DFA16_special;
			this.transition = DFA16_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ARGS | ASSIGN | BODY | BOOL_KW | CHAR_KW | DIV | DOUBLE_KW | ELIF | ELSE | EQ | FALSE | FUN | FUNCTION_CALL | FUNCTION_DEFN | FUN_DEF | GE | GT | IF | INT_KW | LE | LET | LT | MATCH | MINUS | MOD | MULT | MUTABLE | NEQ | OR | PIPE | PLUS | PRINTF | REC | STRING_KW | THEN | TRUE | TYPE | VALUE_DEFN | WHEN | T__55 | T__56 | T__57 | ID | INT | DOUBLE | EXPONENT | STRING | CHAR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace  fsharp_ss 
