//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 D:\\fsharp_compiler\\fsharp_ss.g 2015-10-25 23:05:25

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  fsharp_ss 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class fsharp_ssLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__63=63;
	public const int T__64=64;
	public const int AND=4;
	public const int ARGS=5;
	public const int ASSIGN=6;
	public const int BEGIN=7;
	public const int BODY=8;
	public const int BOOL_KW=9;
	public const int CHAR=10;
	public const int CHAR_KW=11;
	public const int CLOSE_BR=12;
	public const int DIV=13;
	public const int DOUBLE=14;
	public const int DOUBLE_KW=15;
	public const int ELIF=16;
	public const int ELSE=17;
	public const int END=18;
	public const int ENTRY_POINT=19;
	public const int EQ=20;
	public const int ESC_SEQ=21;
	public const int EXPONENT=22;
	public const int EXPR=23;
	public const int FALSE=24;
	public const int FUN=25;
	public const int FUNCTION_CALL=26;
	public const int FUNCTION_DEFN=27;
	public const int FUN_DEF=28;
	public const int GE=29;
	public const int GT=30;
	public const int HEX_DIGIT=31;
	public const int ID=32;
	public const int IF=33;
	public const int INT=34;
	public const int INT_KW=35;
	public const int LE=36;
	public const int LET=37;
	public const int LT=38;
	public const int MATCH=39;
	public const int MINUS=40;
	public const int MOD=41;
	public const int MULT=42;
	public const int MUTABLE=43;
	public const int NAME=44;
	public const int NEQ=45;
	public const int OCTAL_ESC=46;
	public const int OPEN_BR=47;
	public const int OR=48;
	public const int PIPE=49;
	public const int PLUS=50;
	public const int PROGRAM=51;
	public const int REC=52;
	public const int STRING=53;
	public const int STRING_KW=54;
	public const int TAB=55;
	public const int THEN=56;
	public const int TRUE=57;
	public const int TYPE=58;
	public const int UNICODE_ESC=59;
	public const int UNKNOWN=60;
	public const int VALUE_DEFN=61;
	public const int WHEN=62;
	const int HIDDEN = Hidden;

	// delegates
	// delegators

	public fsharp_ssLexer()
	{
		OnCreated();
	}

	public fsharp_ssLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public fsharp_ssLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "D:\\fsharp_compiler\\fsharp_ss.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 1);
		TraceIn("AND", 1);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:10:5: ( '&&' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:10:7: '&&'
			{
			DebugLocation(10, 7);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 1);
			LeaveRule("AND", 1);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_ARGS();
	partial void LeaveRule_ARGS();

	// $ANTLR start "ARGS"
	[GrammarRule("ARGS")]
	private void mARGS()
	{
		EnterRule_ARGS();
		EnterRule("ARGS", 2);
		TraceIn("ARGS", 2);
		try
		{
			int _type = ARGS;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:11:6: ( 'ARGS' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:11:8: 'ARGS'
			{
			DebugLocation(11, 8);
			Match("ARGS"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARGS", 2);
			LeaveRule("ARGS", 2);
			LeaveRule_ARGS();
		}
	}
	// $ANTLR end "ARGS"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 3);
		TraceIn("ASSIGN", 3);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:12:8: ( '<-' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:12:10: '<-'
			{
			DebugLocation(12, 10);
			Match("<-"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 3);
			LeaveRule("ASSIGN", 3);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_BEGIN();
	partial void LeaveRule_BEGIN();

	// $ANTLR start "BEGIN"
	[GrammarRule("BEGIN")]
	private void mBEGIN()
	{
		EnterRule_BEGIN();
		EnterRule("BEGIN", 4);
		TraceIn("BEGIN", 4);
		try
		{
			int _type = BEGIN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:13:7: ( 'begin' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:13:9: 'begin'
			{
			DebugLocation(13, 9);
			Match("begin"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BEGIN", 4);
			LeaveRule("BEGIN", 4);
			LeaveRule_BEGIN();
		}
	}
	// $ANTLR end "BEGIN"

	partial void EnterRule_BODY();
	partial void LeaveRule_BODY();

	// $ANTLR start "BODY"
	[GrammarRule("BODY")]
	private void mBODY()
	{
		EnterRule_BODY();
		EnterRule("BODY", 5);
		TraceIn("BODY", 5);
		try
		{
			int _type = BODY;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:14:6: ( 'BODY' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:14:8: 'BODY'
			{
			DebugLocation(14, 8);
			Match("BODY"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BODY", 5);
			LeaveRule("BODY", 5);
			LeaveRule_BODY();
		}
	}
	// $ANTLR end "BODY"

	partial void EnterRule_BOOL_KW();
	partial void LeaveRule_BOOL_KW();

	// $ANTLR start "BOOL_KW"
	[GrammarRule("BOOL_KW")]
	private void mBOOL_KW()
	{
		EnterRule_BOOL_KW();
		EnterRule("BOOL_KW", 6);
		TraceIn("BOOL_KW", 6);
		try
		{
			int _type = BOOL_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:15:9: ( 'bool' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:15:11: 'bool'
			{
			DebugLocation(15, 11);
			Match("bool"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOL_KW", 6);
			LeaveRule("BOOL_KW", 6);
			LeaveRule_BOOL_KW();
		}
	}
	// $ANTLR end "BOOL_KW"

	partial void EnterRule_CHAR_KW();
	partial void LeaveRule_CHAR_KW();

	// $ANTLR start "CHAR_KW"
	[GrammarRule("CHAR_KW")]
	private void mCHAR_KW()
	{
		EnterRule_CHAR_KW();
		EnterRule("CHAR_KW", 7);
		TraceIn("CHAR_KW", 7);
		try
		{
			int _type = CHAR_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:16:9: ( 'char' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:16:11: 'char'
			{
			DebugLocation(16, 11);
			Match("char"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR_KW", 7);
			LeaveRule("CHAR_KW", 7);
			LeaveRule_CHAR_KW();
		}
	}
	// $ANTLR end "CHAR_KW"

	partial void EnterRule_CLOSE_BR();
	partial void LeaveRule_CLOSE_BR();

	// $ANTLR start "CLOSE_BR"
	[GrammarRule("CLOSE_BR")]
	private void mCLOSE_BR()
	{
		EnterRule_CLOSE_BR();
		EnterRule("CLOSE_BR", 8);
		TraceIn("CLOSE_BR", 8);
		try
		{
			int _type = CLOSE_BR;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:17:10: ( ')' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:17:12: ')'
			{
			DebugLocation(17, 12);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE_BR", 8);
			LeaveRule("CLOSE_BR", 8);
			LeaveRule_CLOSE_BR();
		}
	}
	// $ANTLR end "CLOSE_BR"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 9);
		TraceIn("DIV", 9);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:18:5: ( '/' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:18:7: '/'
			{
			DebugLocation(18, 7);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 9);
			LeaveRule("DIV", 9);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_DOUBLE_KW();
	partial void LeaveRule_DOUBLE_KW();

	// $ANTLR start "DOUBLE_KW"
	[GrammarRule("DOUBLE_KW")]
	private void mDOUBLE_KW()
	{
		EnterRule_DOUBLE_KW();
		EnterRule("DOUBLE_KW", 10);
		TraceIn("DOUBLE_KW", 10);
		try
		{
			int _type = DOUBLE_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:19:11: ( 'double' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:19:13: 'double'
			{
			DebugLocation(19, 13);
			Match("double"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE_KW", 10);
			LeaveRule("DOUBLE_KW", 10);
			LeaveRule_DOUBLE_KW();
		}
	}
	// $ANTLR end "DOUBLE_KW"

	partial void EnterRule_ELIF();
	partial void LeaveRule_ELIF();

	// $ANTLR start "ELIF"
	[GrammarRule("ELIF")]
	private void mELIF()
	{
		EnterRule_ELIF();
		EnterRule("ELIF", 11);
		TraceIn("ELIF", 11);
		try
		{
			int _type = ELIF;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:20:6: ( 'elif' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:20:8: 'elif'
			{
			DebugLocation(20, 8);
			Match("elif"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELIF", 11);
			LeaveRule("ELIF", 11);
			LeaveRule_ELIF();
		}
	}
	// $ANTLR end "ELIF"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 12);
		TraceIn("ELSE", 12);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:21:6: ( 'else' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:21:8: 'else'
			{
			DebugLocation(21, 8);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 12);
			LeaveRule("ELSE", 12);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 13);
		TraceIn("END", 13);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:22:5: ( 'end' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:22:7: 'end'
			{
			DebugLocation(22, 7);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 13);
			LeaveRule("END", 13);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_ENTRY_POINT();
	partial void LeaveRule_ENTRY_POINT();

	// $ANTLR start "ENTRY_POINT"
	[GrammarRule("ENTRY_POINT")]
	private void mENTRY_POINT()
	{
		EnterRule_ENTRY_POINT();
		EnterRule("ENTRY_POINT", 14);
		TraceIn("ENTRY_POINT", 14);
		try
		{
			int _type = ENTRY_POINT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:23:13: ( '[<EntryPoint>]' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:23:15: '[<EntryPoint>]'
			{
			DebugLocation(23, 15);
			Match("[<EntryPoint>]"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENTRY_POINT", 14);
			LeaveRule("ENTRY_POINT", 14);
			LeaveRule_ENTRY_POINT();
		}
	}
	// $ANTLR end "ENTRY_POINT"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 15);
		TraceIn("EQ", 15);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:24:4: ( '=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:24:6: '='
			{
			DebugLocation(24, 6);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 15);
			LeaveRule("EQ", 15);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_EXPR();
	partial void LeaveRule_EXPR();

	// $ANTLR start "EXPR"
	[GrammarRule("EXPR")]
	private void mEXPR()
	{
		EnterRule_EXPR();
		EnterRule("EXPR", 16);
		TraceIn("EXPR", 16);
		try
		{
			int _type = EXPR;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:25:6: ( 'EXPR' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:25:8: 'EXPR'
			{
			DebugLocation(25, 8);
			Match("EXPR"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXPR", 16);
			LeaveRule("EXPR", 16);
			LeaveRule_EXPR();
		}
	}
	// $ANTLR end "EXPR"

	partial void EnterRule_FALSE();
	partial void LeaveRule_FALSE();

	// $ANTLR start "FALSE"
	[GrammarRule("FALSE")]
	private void mFALSE()
	{
		EnterRule_FALSE();
		EnterRule("FALSE", 17);
		TraceIn("FALSE", 17);
		try
		{
			int _type = FALSE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:26:7: ( 'false' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:26:9: 'false'
			{
			DebugLocation(26, 9);
			Match("false"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FALSE", 17);
			LeaveRule("FALSE", 17);
			LeaveRule_FALSE();
		}
	}
	// $ANTLR end "FALSE"

	partial void EnterRule_FUN();
	partial void LeaveRule_FUN();

	// $ANTLR start "FUN"
	[GrammarRule("FUN")]
	private void mFUN()
	{
		EnterRule_FUN();
		EnterRule("FUN", 18);
		TraceIn("FUN", 18);
		try
		{
			int _type = FUN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:27:5: ( 'fun' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:27:7: 'fun'
			{
			DebugLocation(27, 7);
			Match("fun"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUN", 18);
			LeaveRule("FUN", 18);
			LeaveRule_FUN();
		}
	}
	// $ANTLR end "FUN"

	partial void EnterRule_FUNCTION_CALL();
	partial void LeaveRule_FUNCTION_CALL();

	// $ANTLR start "FUNCTION_CALL"
	[GrammarRule("FUNCTION_CALL")]
	private void mFUNCTION_CALL()
	{
		EnterRule_FUNCTION_CALL();
		EnterRule("FUNCTION_CALL", 19);
		TraceIn("FUNCTION_CALL", 19);
		try
		{
			int _type = FUNCTION_CALL;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:28:15: ( 'FUNCTION_CALL' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:28:17: 'FUNCTION_CALL'
			{
			DebugLocation(28, 17);
			Match("FUNCTION_CALL"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION_CALL", 19);
			LeaveRule("FUNCTION_CALL", 19);
			LeaveRule_FUNCTION_CALL();
		}
	}
	// $ANTLR end "FUNCTION_CALL"

	partial void EnterRule_FUNCTION_DEFN();
	partial void LeaveRule_FUNCTION_DEFN();

	// $ANTLR start "FUNCTION_DEFN"
	[GrammarRule("FUNCTION_DEFN")]
	private void mFUNCTION_DEFN()
	{
		EnterRule_FUNCTION_DEFN();
		EnterRule("FUNCTION_DEFN", 20);
		TraceIn("FUNCTION_DEFN", 20);
		try
		{
			int _type = FUNCTION_DEFN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:29:15: ( 'FUNCTION_DEFN' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:29:17: 'FUNCTION_DEFN'
			{
			DebugLocation(29, 17);
			Match("FUNCTION_DEFN"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNCTION_DEFN", 20);
			LeaveRule("FUNCTION_DEFN", 20);
			LeaveRule_FUNCTION_DEFN();
		}
	}
	// $ANTLR end "FUNCTION_DEFN"

	partial void EnterRule_FUN_DEF();
	partial void LeaveRule_FUN_DEF();

	// $ANTLR start "FUN_DEF"
	[GrammarRule("FUN_DEF")]
	private void mFUN_DEF()
	{
		EnterRule_FUN_DEF();
		EnterRule("FUN_DEF", 21);
		TraceIn("FUN_DEF", 21);
		try
		{
			int _type = FUN_DEF;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:30:9: ( '->' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:30:11: '->'
			{
			DebugLocation(30, 11);
			Match("->"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUN_DEF", 21);
			LeaveRule("FUN_DEF", 21);
			LeaveRule_FUN_DEF();
		}
	}
	// $ANTLR end "FUN_DEF"

	partial void EnterRule_GE();
	partial void LeaveRule_GE();

	// $ANTLR start "GE"
	[GrammarRule("GE")]
	private void mGE()
	{
		EnterRule_GE();
		EnterRule("GE", 22);
		TraceIn("GE", 22);
		try
		{
			int _type = GE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:31:4: ( '>=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:31:6: '>='
			{
			DebugLocation(31, 6);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GE", 22);
			LeaveRule("GE", 22);
			LeaveRule_GE();
		}
	}
	// $ANTLR end "GE"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 23);
		TraceIn("GT", 23);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:32:4: ( '>' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:32:6: '>'
			{
			DebugLocation(32, 6);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 23);
			LeaveRule("GT", 23);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 24);
		TraceIn("IF", 24);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:33:4: ( 'if' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:33:6: 'if'
			{
			DebugLocation(33, 6);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 24);
			LeaveRule("IF", 24);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_INT_KW();
	partial void LeaveRule_INT_KW();

	// $ANTLR start "INT_KW"
	[GrammarRule("INT_KW")]
	private void mINT_KW()
	{
		EnterRule_INT_KW();
		EnterRule("INT_KW", 25);
		TraceIn("INT_KW", 25);
		try
		{
			int _type = INT_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:34:8: ( 'int' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:34:10: 'int'
			{
			DebugLocation(34, 10);
			Match("int"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT_KW", 25);
			LeaveRule("INT_KW", 25);
			LeaveRule_INT_KW();
		}
	}
	// $ANTLR end "INT_KW"

	partial void EnterRule_LE();
	partial void LeaveRule_LE();

	// $ANTLR start "LE"
	[GrammarRule("LE")]
	private void mLE()
	{
		EnterRule_LE();
		EnterRule("LE", 26);
		TraceIn("LE", 26);
		try
		{
			int _type = LE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:35:4: ( '<=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:35:6: '<='
			{
			DebugLocation(35, 6);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LE", 26);
			LeaveRule("LE", 26);
			LeaveRule_LE();
		}
	}
	// $ANTLR end "LE"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 27);
		TraceIn("LET", 27);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:36:5: ( 'let' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:36:7: 'let'
			{
			DebugLocation(36, 7);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 27);
			LeaveRule("LET", 27);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 28);
		TraceIn("LT", 28);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:37:4: ( '<' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:37:6: '<'
			{
			DebugLocation(37, 6);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 28);
			LeaveRule("LT", 28);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_MATCH();
	partial void LeaveRule_MATCH();

	// $ANTLR start "MATCH"
	[GrammarRule("MATCH")]
	private void mMATCH()
	{
		EnterRule_MATCH();
		EnterRule("MATCH", 29);
		TraceIn("MATCH", 29);
		try
		{
			int _type = MATCH;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:38:7: ( 'match' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:38:9: 'match'
			{
			DebugLocation(38, 9);
			Match("match"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MATCH", 29);
			LeaveRule("MATCH", 29);
			LeaveRule_MATCH();
		}
	}
	// $ANTLR end "MATCH"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 30);
		TraceIn("MINUS", 30);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:39:7: ( '-' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:39:9: '-'
			{
			DebugLocation(39, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 30);
			LeaveRule("MINUS", 30);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MOD();
	partial void LeaveRule_MOD();

	// $ANTLR start "MOD"
	[GrammarRule("MOD")]
	private void mMOD()
	{
		EnterRule_MOD();
		EnterRule("MOD", 31);
		TraceIn("MOD", 31);
		try
		{
			int _type = MOD;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:40:5: ( '%' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:40:7: '%'
			{
			DebugLocation(40, 7);
			Match('%'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MOD", 31);
			LeaveRule("MOD", 31);
			LeaveRule_MOD();
		}
	}
	// $ANTLR end "MOD"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 32);
		TraceIn("MULT", 32);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:41:6: ( '*' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:41:8: '*'
			{
			DebugLocation(41, 8);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 32);
			LeaveRule("MULT", 32);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_MUTABLE();
	partial void LeaveRule_MUTABLE();

	// $ANTLR start "MUTABLE"
	[GrammarRule("MUTABLE")]
	private void mMUTABLE()
	{
		EnterRule_MUTABLE();
		EnterRule("MUTABLE", 33);
		TraceIn("MUTABLE", 33);
		try
		{
			int _type = MUTABLE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:42:9: ( 'mutable' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:42:11: 'mutable'
			{
			DebugLocation(42, 11);
			Match("mutable"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MUTABLE", 33);
			LeaveRule("MUTABLE", 33);
			LeaveRule_MUTABLE();
		}
	}
	// $ANTLR end "MUTABLE"

	partial void EnterRule_NAME();
	partial void LeaveRule_NAME();

	// $ANTLR start "NAME"
	[GrammarRule("NAME")]
	private void mNAME()
	{
		EnterRule_NAME();
		EnterRule("NAME", 34);
		TraceIn("NAME", 34);
		try
		{
			int _type = NAME;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:43:6: ( 'NAME' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:43:8: 'NAME'
			{
			DebugLocation(43, 8);
			Match("NAME"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAME", 34);
			LeaveRule("NAME", 34);
			LeaveRule_NAME();
		}
	}
	// $ANTLR end "NAME"

	partial void EnterRule_NEQ();
	partial void LeaveRule_NEQ();

	// $ANTLR start "NEQ"
	[GrammarRule("NEQ")]
	private void mNEQ()
	{
		EnterRule_NEQ();
		EnterRule("NEQ", 35);
		TraceIn("NEQ", 35);
		try
		{
			int _type = NEQ;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:44:5: ( '!=' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:44:7: '!='
			{
			DebugLocation(44, 7);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NEQ", 35);
			LeaveRule("NEQ", 35);
			LeaveRule_NEQ();
		}
	}
	// $ANTLR end "NEQ"

	partial void EnterRule_OPEN_BR();
	partial void LeaveRule_OPEN_BR();

	// $ANTLR start "OPEN_BR"
	[GrammarRule("OPEN_BR")]
	private void mOPEN_BR()
	{
		EnterRule_OPEN_BR();
		EnterRule("OPEN_BR", 36);
		TraceIn("OPEN_BR", 36);
		try
		{
			int _type = OPEN_BR;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:45:9: ( '(' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:45:11: '('
			{
			DebugLocation(45, 11);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN_BR", 36);
			LeaveRule("OPEN_BR", 36);
			LeaveRule_OPEN_BR();
		}
	}
	// $ANTLR end "OPEN_BR"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 37);
		TraceIn("OR", 37);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:46:4: ( '||' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:46:6: '||'
			{
			DebugLocation(46, 6);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 37);
			LeaveRule("OR", 37);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_PIPE();
	partial void LeaveRule_PIPE();

	// $ANTLR start "PIPE"
	[GrammarRule("PIPE")]
	private void mPIPE()
	{
		EnterRule_PIPE();
		EnterRule("PIPE", 38);
		TraceIn("PIPE", 38);
		try
		{
			int _type = PIPE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:47:6: ( '|>' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:47:8: '|>'
			{
			DebugLocation(47, 8);
			Match("|>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PIPE", 38);
			LeaveRule("PIPE", 38);
			LeaveRule_PIPE();
		}
	}
	// $ANTLR end "PIPE"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 39);
		TraceIn("PLUS", 39);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:48:6: ( '+' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:48:8: '+'
			{
			DebugLocation(48, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 39);
			LeaveRule("PLUS", 39);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_PROGRAM();
	partial void LeaveRule_PROGRAM();

	// $ANTLR start "PROGRAM"
	[GrammarRule("PROGRAM")]
	private void mPROGRAM()
	{
		EnterRule_PROGRAM();
		EnterRule("PROGRAM", 40);
		TraceIn("PROGRAM", 40);
		try
		{
			int _type = PROGRAM;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:49:9: ( 'PROGRAM' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:49:11: 'PROGRAM'
			{
			DebugLocation(49, 11);
			Match("PROGRAM"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROGRAM", 40);
			LeaveRule("PROGRAM", 40);
			LeaveRule_PROGRAM();
		}
	}
	// $ANTLR end "PROGRAM"

	partial void EnterRule_REC();
	partial void LeaveRule_REC();

	// $ANTLR start "REC"
	[GrammarRule("REC")]
	private void mREC()
	{
		EnterRule_REC();
		EnterRule("REC", 41);
		TraceIn("REC", 41);
		try
		{
			int _type = REC;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:50:5: ( 'rec' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:50:7: 'rec'
			{
			DebugLocation(50, 7);
			Match("rec"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REC", 41);
			LeaveRule("REC", 41);
			LeaveRule_REC();
		}
	}
	// $ANTLR end "REC"

	partial void EnterRule_STRING_KW();
	partial void LeaveRule_STRING_KW();

	// $ANTLR start "STRING_KW"
	[GrammarRule("STRING_KW")]
	private void mSTRING_KW()
	{
		EnterRule_STRING_KW();
		EnterRule("STRING_KW", 42);
		TraceIn("STRING_KW", 42);
		try
		{
			int _type = STRING_KW;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:51:11: ( 'string' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:51:13: 'string'
			{
			DebugLocation(51, 13);
			Match("string"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_KW", 42);
			LeaveRule("STRING_KW", 42);
			LeaveRule_STRING_KW();
		}
	}
	// $ANTLR end "STRING_KW"

	partial void EnterRule_TAB();
	partial void LeaveRule_TAB();

	// $ANTLR start "TAB"
	[GrammarRule("TAB")]
	private void mTAB()
	{
		EnterRule_TAB();
		EnterRule("TAB", 43);
		TraceIn("TAB", 43);
		try
		{
			int _type = TAB;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:52:5: ( '\\t' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:52:7: '\\t'
			{
			DebugLocation(52, 7);
			Match('\t'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TAB", 43);
			LeaveRule("TAB", 43);
			LeaveRule_TAB();
		}
	}
	// $ANTLR end "TAB"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 44);
		TraceIn("THEN", 44);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:53:6: ( 'then' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:53:8: 'then'
			{
			DebugLocation(53, 8);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 44);
			LeaveRule("THEN", 44);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_TRUE();
	partial void LeaveRule_TRUE();

	// $ANTLR start "TRUE"
	[GrammarRule("TRUE")]
	private void mTRUE()
	{
		EnterRule_TRUE();
		EnterRule("TRUE", 45);
		TraceIn("TRUE", 45);
		try
		{
			int _type = TRUE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:54:6: ( 'true' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:54:8: 'true'
			{
			DebugLocation(54, 8);
			Match("true"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TRUE", 45);
			LeaveRule("TRUE", 45);
			LeaveRule_TRUE();
		}
	}
	// $ANTLR end "TRUE"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 46);
		TraceIn("TYPE", 46);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:55:6: ( 'TYPE' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:55:8: 'TYPE'
			{
			DebugLocation(55, 8);
			Match("TYPE"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 46);
			LeaveRule("TYPE", 46);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_VALUE_DEFN();
	partial void LeaveRule_VALUE_DEFN();

	// $ANTLR start "VALUE_DEFN"
	[GrammarRule("VALUE_DEFN")]
	private void mVALUE_DEFN()
	{
		EnterRule_VALUE_DEFN();
		EnterRule("VALUE_DEFN", 47);
		TraceIn("VALUE_DEFN", 47);
		try
		{
			int _type = VALUE_DEFN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:56:12: ( 'VALUE_DEFN' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:56:14: 'VALUE_DEFN'
			{
			DebugLocation(56, 14);
			Match("VALUE_DEFN"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VALUE_DEFN", 47);
			LeaveRule("VALUE_DEFN", 47);
			LeaveRule_VALUE_DEFN();
		}
	}
	// $ANTLR end "VALUE_DEFN"

	partial void EnterRule_WHEN();
	partial void LeaveRule_WHEN();

	// $ANTLR start "WHEN"
	[GrammarRule("WHEN")]
	private void mWHEN()
	{
		EnterRule_WHEN();
		EnterRule("WHEN", 48);
		TraceIn("WHEN", 48);
		try
		{
			int _type = WHEN;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:57:6: ( 'when' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:57:8: 'when'
			{
			DebugLocation(57, 8);
			Match("when"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHEN", 48);
			LeaveRule("WHEN", 48);
			LeaveRule_WHEN();
		}
	}
	// $ANTLR end "WHEN"

	partial void EnterRule_T__63();
	partial void LeaveRule_T__63();

	// $ANTLR start "T__63"
	[GrammarRule("T__63")]
	private void mT__63()
	{
		EnterRule_T__63();
		EnterRule("T__63", 49);
		TraceIn("T__63", 49);
		try
		{
			int _type = T__63;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:58:7: ( ':' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:58:9: ':'
			{
			DebugLocation(58, 9);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__63", 49);
			LeaveRule("T__63", 49);
			LeaveRule_T__63();
		}
	}
	// $ANTLR end "T__63"

	partial void EnterRule_T__64();
	partial void LeaveRule_T__64();

	// $ANTLR start "T__64"
	[GrammarRule("T__64")]
	private void mT__64()
	{
		EnterRule_T__64();
		EnterRule("T__64", 50);
		TraceIn("T__64", 50);
		try
		{
			int _type = T__64;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:59:7: ( ';' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:59:9: ';'
			{
			DebugLocation(59, 9);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__64", 50);
			LeaveRule("T__64", 50);
			LeaveRule_T__64();
		}
	}
	// $ANTLR end "T__64"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 51);
		TraceIn("ID", 51);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:69:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:69:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(69, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(69, 31);
			// D:\\fsharp_compiler\\fsharp_ss.g:69:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:
					{
					DebugLocation(69, 31);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 51);
			LeaveRule("ID", 51);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 52);
		TraceIn("INT", 52);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:72:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:72:7: ( '0' .. '9' )+
			{
			DebugLocation(72, 7);
			// D:\\fsharp_compiler\\fsharp_ss.g:72:7: ( '0' .. '9' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='0' && LA2_1<='9')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:
					{
					DebugLocation(72, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 52);
			LeaveRule("INT", 52);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_DOUBLE();
	partial void LeaveRule_DOUBLE();

	// $ANTLR start "DOUBLE"
	[GrammarRule("DOUBLE")]
	private void mDOUBLE()
	{
		EnterRule_DOUBLE();
		EnterRule("DOUBLE", 53);
		TraceIn("DOUBLE", 53);
		try
		{
			int _type = DOUBLE;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:75:8: ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT )
			int alt9=3;
			try { DebugEnterDecision(9, false);
			try
			{
				alt9 = dfa9.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:75:12: ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )?
				{
				DebugLocation(75, 12);
				// D:\\fsharp_compiler\\fsharp_ss.g:75:12: ( '0' .. '9' )+
				int cnt3=0;
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if (((LA3_1>='0' && LA3_1<='9')))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(75, 12);
						input.Consume();


						}
						break;

					default:
						if (cnt3 >= 1)
							goto loop3;

						EarlyExitException eee3 = new EarlyExitException( 3, input );
						DebugRecognitionException(eee3);
						throw eee3;
					}
					cnt3++;
				}
				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(75, 24);
				Match('.'); 
				DebugLocation(75, 28);
				// D:\\fsharp_compiler\\fsharp_ss.g:75:28: ( '0' .. '9' )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_1 = input.LA(1);

					if (((LA4_1>='0' && LA4_1<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(75, 28);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }

				DebugLocation(75, 40);
				// D:\\fsharp_compiler\\fsharp_ss.g:75:40: ( EXPONENT )?
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1=='E'||LA5_1=='e'))
				{
					alt5 = 1;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:75:40: EXPONENT
					{
					DebugLocation(75, 40);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:76:6: '.' ( '0' .. '9' )+ ( EXPONENT )?
				{
				DebugLocation(76, 6);
				Match('.'); 
				DebugLocation(76, 10);
				// D:\\fsharp_compiler\\fsharp_ss.g:76:10: ( '0' .. '9' )+
				int cnt6=0;
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_1 = input.LA(1);

					if (((LA6_1>='0' && LA6_1<='9')))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(76, 10);
						input.Consume();


						}
						break;

					default:
						if (cnt6 >= 1)
							goto loop6;

						EarlyExitException eee6 = new EarlyExitException( 6, input );
						DebugRecognitionException(eee6);
						throw eee6;
					}
					cnt6++;
				}
				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(76, 22);
				// D:\\fsharp_compiler\\fsharp_ss.g:76:22: ( EXPONENT )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1=='E'||LA7_1=='e'))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:76:22: EXPONENT
					{
					DebugLocation(76, 22);
					mEXPONENT(); 

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\fsharp_compiler\\fsharp_ss.g:77:13: ( '0' .. '9' )+ EXPONENT
				{
				DebugLocation(77, 13);
				// D:\\fsharp_compiler\\fsharp_ss.g:77:13: ( '0' .. '9' )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_1 = input.LA(1);

					if (((LA8_1>='0' && LA8_1<='9')))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// D:\\fsharp_compiler\\fsharp_ss.g:
						{
						DebugLocation(77, 13);
						input.Consume();


						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(77, 25);
				mEXPONENT(); 

				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOUBLE", 53);
			LeaveRule("DOUBLE", 53);
			LeaveRule_DOUBLE();
		}
	}
	// $ANTLR end "DOUBLE"

	partial void EnterRule_EXPONENT();
	partial void LeaveRule_EXPONENT();

	// $ANTLR start "EXPONENT"
	[GrammarRule("EXPONENT")]
	private void mEXPONENT()
	{
		EnterRule_EXPONENT();
		EnterRule("EXPONENT", 54);
		TraceIn("EXPONENT", 54);
		try
		{
			int _type = EXPONENT;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:80:10: ( ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:80:12: ( 'e' | 'E' ) ( '+' | '-' )? ( '0' .. '9' )+
			{
			DebugLocation(80, 12);
			if (input.LA(1)=='E'||input.LA(1)=='e')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(80, 22);
			// D:\\fsharp_compiler\\fsharp_ss.g:80:22: ( '+' | '-' )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, false);
			int LA10_1 = input.LA(1);

			if ((LA10_1=='+'||LA10_1=='-'))
			{
				alt10 = 1;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:
				{
				DebugLocation(80, 22);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(80, 33);
			// D:\\fsharp_compiler\\fsharp_ss.g:80:33: ( '0' .. '9' )+
			int cnt11=0;
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if (((LA11_1>='0' && LA11_1<='9')))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:
					{
					DebugLocation(80, 33);
					input.Consume();


					}
					break;

				default:
					if (cnt11 >= 1)
						goto loop11;

					EarlyExitException eee11 = new EarlyExitException( 11, input );
					DebugRecognitionException(eee11);
					throw eee11;
				}
				cnt11++;
			}
			loop11:
				;

			} finally { DebugExitSubRule(11); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXPONENT", 54);
			LeaveRule("EXPONENT", 54);
			LeaveRule_EXPONENT();
		}
	}
	// $ANTLR end "EXPONENT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 55);
		TraceIn("STRING", 55);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:83:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:83:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(83, 8);
			Match('\"'); 
			DebugLocation(83, 12);
			// D:\\fsharp_compiler\\fsharp_ss.g:83:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=3;
				try { DebugEnterDecision(12, false);
				int LA12_1 = input.LA(1);

				if ((LA12_1=='\\'))
				{
					alt12 = 1;
				}
				else if (((LA12_1>='\u0000' && LA12_1<='!')||(LA12_1>='#' && LA12_1<='[')||(LA12_1>=']' && LA12_1<='\uFFFF')))
				{
					alt12 = 2;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// D:\\fsharp_compiler\\fsharp_ss.g:83:14: ESC_SEQ
					{
					DebugLocation(83, 14);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// D:\\fsharp_compiler\\fsharp_ss.g:83:24: ~ ( '\\\\' | '\"' )
					{
					DebugLocation(83, 24);
					input.Consume();


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(83, 39);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 55);
			LeaveRule("STRING", 55);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_CHAR();
	partial void LeaveRule_CHAR();

	// $ANTLR start "CHAR"
	[GrammarRule("CHAR")]
	private void mCHAR()
	{
		EnterRule_CHAR();
		EnterRule("CHAR", 56);
		TraceIn("CHAR", 56);
		try
		{
			int _type = CHAR;
			int _channel = DefaultTokenChannel;
			// D:\\fsharp_compiler\\fsharp_ss.g:86:5: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:86:8: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
			{
			DebugLocation(86, 8);
			Match('\''); 
			DebugLocation(86, 13);
			// D:\\fsharp_compiler\\fsharp_ss.g:86:13: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1=='\\'))
			{
				alt13 = 1;
			}
			else if (((LA13_1>='\u0000' && LA13_1<='&')||(LA13_1>='(' && LA13_1<='[')||(LA13_1>=']' && LA13_1<='\uFFFF')))
			{
				alt13 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:86:15: ESC_SEQ
				{
				DebugLocation(86, 15);
				mESC_SEQ(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:86:25: ~ ( '\\'' | '\\\\' )
				{
				DebugLocation(86, 25);
				input.Consume();


				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(86, 40);
			Match('\''); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CHAR", 56);
			LeaveRule("CHAR", 56);
			LeaveRule_CHAR();
		}
	}
	// $ANTLR end "CHAR"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 57);
		TraceIn("HEX_DIGIT", 57);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:91:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:
			{
			DebugLocation(91, 11);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 57);
			LeaveRule("HEX_DIGIT", 57);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 58);
		TraceIn("ESC_SEQ", 58);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:95:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | OCTAL_ESC )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			int LA14_1 = input.LA(1);

			if ((LA14_1=='\\'))
			{
				switch (input.LA(2))
				{
				case '\"':
				case '\'':
				case '\\':
				case 'b':
				case 'f':
				case 'n':
				case 'r':
				case 't':
					{
					alt14 = 1;
					}
					break;
				case 'u':
					{
					alt14 = 2;
					}
					break;
				case '0':
				case '1':
				case '2':
				case '3':
				case '4':
				case '5':
				case '6':
				case '7':
					{
					alt14 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:95:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
				{
				DebugLocation(95, 9);
				Match('\\'); 
				DebugLocation(95, 14);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:96:9: UNICODE_ESC
				{
				DebugLocation(96, 9);
				mUNICODE_ESC(); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\fsharp_compiler\\fsharp_ss.g:97:9: OCTAL_ESC
				{
				DebugLocation(97, 9);
				mOCTAL_ESC(); 

				}
				break;

			}
		}
		finally
		{
			TraceOut("ESC_SEQ", 58);
			LeaveRule("ESC_SEQ", 58);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	partial void EnterRule_OCTAL_ESC();
	partial void LeaveRule_OCTAL_ESC();

	// $ANTLR start "OCTAL_ESC"
	[GrammarRule("OCTAL_ESC")]
	private void mOCTAL_ESC()
	{
		EnterRule_OCTAL_ESC();
		EnterRule("OCTAL_ESC", 59);
		TraceIn("OCTAL_ESC", 59);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:102:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1=='\\'))
			{
				int LA15_2 = input.LA(2);

				if (((LA15_2>='0' && LA15_2<='3')))
				{
					int LA15_3 = input.LA(3);

					if (((LA15_3>='0' && LA15_3<='7')))
					{
						int LA15_4 = input.LA(4);

						if (((LA15_4>='0' && LA15_4<='7')))
						{
							alt15 = 1;
						}
						else
						{
							alt15 = 2;
						}
					}
					else
					{
						alt15 = 3;
					}
				}
				else if (((LA15_2>='4' && LA15_2<='7')))
				{
					int LA15_3 = input.LA(3);

					if (((LA15_3>='0' && LA15_3<='7')))
					{
						alt15 = 2;
					}
					else
					{
						alt15 = 3;
					}
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 15, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// D:\\fsharp_compiler\\fsharp_ss.g:102:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(102, 9);
				Match('\\'); 
				DebugLocation(102, 14);
				input.Consume();

				DebugLocation(102, 25);
				input.Consume();

				DebugLocation(102, 36);
				input.Consume();


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// D:\\fsharp_compiler\\fsharp_ss.g:103:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
				{
				DebugLocation(103, 9);
				Match('\\'); 
				DebugLocation(103, 14);
				input.Consume();

				DebugLocation(103, 25);
				input.Consume();


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// D:\\fsharp_compiler\\fsharp_ss.g:104:9: '\\\\' ( '0' .. '7' )
				{
				DebugLocation(104, 9);
				Match('\\'); 
				DebugLocation(104, 14);
				input.Consume();


				}
				break;

			}
		}
		finally
		{
			TraceOut("OCTAL_ESC", 59);
			LeaveRule("OCTAL_ESC", 59);
			LeaveRule_OCTAL_ESC();
		}
	}
	// $ANTLR end "OCTAL_ESC"

	partial void EnterRule_UNICODE_ESC();
	partial void LeaveRule_UNICODE_ESC();

	// $ANTLR start "UNICODE_ESC"
	[GrammarRule("UNICODE_ESC")]
	private void mUNICODE_ESC()
	{
		EnterRule_UNICODE_ESC();
		EnterRule("UNICODE_ESC", 60);
		TraceIn("UNICODE_ESC", 60);
		try
		{
			// D:\\fsharp_compiler\\fsharp_ss.g:109:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:109:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
			{
			DebugLocation(109, 9);
			Match('\\'); 
			DebugLocation(109, 14);
			Match('u'); 
			DebugLocation(109, 18);
			mHEX_DIGIT(); 
			DebugLocation(109, 28);
			mHEX_DIGIT(); 
			DebugLocation(109, 38);
			mHEX_DIGIT(); 
			DebugLocation(109, 48);
			mHEX_DIGIT(); 

			}

		}
		finally
		{
			TraceOut("UNICODE_ESC", 60);
			LeaveRule("UNICODE_ESC", 60);
			LeaveRule_UNICODE_ESC();
		}
	}
	// $ANTLR end "UNICODE_ESC"

	public override void mTokens()
	{
		// D:\\fsharp_compiler\\fsharp_ss.g:1:8: ( AND | ARGS | ASSIGN | BEGIN | BODY | BOOL_KW | CHAR_KW | CLOSE_BR | DIV | DOUBLE_KW | ELIF | ELSE | END | ENTRY_POINT | EQ | EXPR | FALSE | FUN | FUNCTION_CALL | FUNCTION_DEFN | FUN_DEF | GE | GT | IF | INT_KW | LE | LET | LT | MATCH | MINUS | MOD | MULT | MUTABLE | NAME | NEQ | OPEN_BR | OR | PIPE | PLUS | PROGRAM | REC | STRING_KW | TAB | THEN | TRUE | TYPE | VALUE_DEFN | WHEN | T__63 | T__64 | ID | INT | DOUBLE | EXPONENT | STRING | CHAR )
		int alt16=56;
		try { DebugEnterDecision(16, false);
		try
		{
			alt16 = dfa16.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(16); }
		switch (alt16)
		{
		case 1:
			DebugEnterAlt(1);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:10: AND
			{
			DebugLocation(1, 10);
			mAND(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:14: ARGS
			{
			DebugLocation(1, 14);
			mARGS(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:19: ASSIGN
			{
			DebugLocation(1, 19);
			mASSIGN(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:26: BEGIN
			{
			DebugLocation(1, 26);
			mBEGIN(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:32: BODY
			{
			DebugLocation(1, 32);
			mBODY(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:37: BOOL_KW
			{
			DebugLocation(1, 37);
			mBOOL_KW(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:45: CHAR_KW
			{
			DebugLocation(1, 45);
			mCHAR_KW(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:53: CLOSE_BR
			{
			DebugLocation(1, 53);
			mCLOSE_BR(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:62: DIV
			{
			DebugLocation(1, 62);
			mDIV(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:66: DOUBLE_KW
			{
			DebugLocation(1, 66);
			mDOUBLE_KW(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:76: ELIF
			{
			DebugLocation(1, 76);
			mELIF(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:81: ELSE
			{
			DebugLocation(1, 81);
			mELSE(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:86: END
			{
			DebugLocation(1, 86);
			mEND(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:90: ENTRY_POINT
			{
			DebugLocation(1, 90);
			mENTRY_POINT(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:102: EQ
			{
			DebugLocation(1, 102);
			mEQ(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:105: EXPR
			{
			DebugLocation(1, 105);
			mEXPR(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:110: FALSE
			{
			DebugLocation(1, 110);
			mFALSE(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:116: FUN
			{
			DebugLocation(1, 116);
			mFUN(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:120: FUNCTION_CALL
			{
			DebugLocation(1, 120);
			mFUNCTION_CALL(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:134: FUNCTION_DEFN
			{
			DebugLocation(1, 134);
			mFUNCTION_DEFN(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:148: FUN_DEF
			{
			DebugLocation(1, 148);
			mFUN_DEF(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:156: GE
			{
			DebugLocation(1, 156);
			mGE(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:159: GT
			{
			DebugLocation(1, 159);
			mGT(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:162: IF
			{
			DebugLocation(1, 162);
			mIF(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:165: INT_KW
			{
			DebugLocation(1, 165);
			mINT_KW(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:172: LE
			{
			DebugLocation(1, 172);
			mLE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:175: LET
			{
			DebugLocation(1, 175);
			mLET(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:179: LT
			{
			DebugLocation(1, 179);
			mLT(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:182: MATCH
			{
			DebugLocation(1, 182);
			mMATCH(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:188: MINUS
			{
			DebugLocation(1, 188);
			mMINUS(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:194: MOD
			{
			DebugLocation(1, 194);
			mMOD(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:198: MULT
			{
			DebugLocation(1, 198);
			mMULT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:203: MUTABLE
			{
			DebugLocation(1, 203);
			mMUTABLE(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:211: NAME
			{
			DebugLocation(1, 211);
			mNAME(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:216: NEQ
			{
			DebugLocation(1, 216);
			mNEQ(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:220: OPEN_BR
			{
			DebugLocation(1, 220);
			mOPEN_BR(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:228: OR
			{
			DebugLocation(1, 228);
			mOR(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:231: PIPE
			{
			DebugLocation(1, 231);
			mPIPE(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:236: PLUS
			{
			DebugLocation(1, 236);
			mPLUS(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:241: PROGRAM
			{
			DebugLocation(1, 241);
			mPROGRAM(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:249: REC
			{
			DebugLocation(1, 249);
			mREC(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:253: STRING_KW
			{
			DebugLocation(1, 253);
			mSTRING_KW(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:263: TAB
			{
			DebugLocation(1, 263);
			mTAB(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:267: THEN
			{
			DebugLocation(1, 267);
			mTHEN(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:272: TRUE
			{
			DebugLocation(1, 272);
			mTRUE(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:277: TYPE
			{
			DebugLocation(1, 277);
			mTYPE(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:282: VALUE_DEFN
			{
			DebugLocation(1, 282);
			mVALUE_DEFN(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:293: WHEN
			{
			DebugLocation(1, 293);
			mWHEN(); 

			}
			break;
		case 49:
			DebugEnterAlt(49);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:298: T__63
			{
			DebugLocation(1, 298);
			mT__63(); 

			}
			break;
		case 50:
			DebugEnterAlt(50);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:304: T__64
			{
			DebugLocation(1, 304);
			mT__64(); 

			}
			break;
		case 51:
			DebugEnterAlt(51);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:310: ID
			{
			DebugLocation(1, 310);
			mID(); 

			}
			break;
		case 52:
			DebugEnterAlt(52);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:313: INT
			{
			DebugLocation(1, 313);
			mINT(); 

			}
			break;
		case 53:
			DebugEnterAlt(53);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:317: DOUBLE
			{
			DebugLocation(1, 317);
			mDOUBLE(); 

			}
			break;
		case 54:
			DebugEnterAlt(54);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:324: EXPONENT
			{
			DebugLocation(1, 324);
			mEXPONENT(); 

			}
			break;
		case 55:
			DebugEnterAlt(55);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:333: STRING
			{
			DebugLocation(1, 333);
			mSTRING(); 

			}
			break;
		case 56:
			DebugEnterAlt(56);
			// D:\\fsharp_compiler\\fsharp_ss.g:1:340: CHAR
			{
			DebugLocation(1, 340);
			mCHAR(); 

			}
			break;

		}

	}


	#region DFA
	DFA9 dfa9;
	DFA16 dfa16;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa9 = new DFA9(this);
		dfa16 = new DFA16(this);
	}

	private class DFA9 : DFA
	{
		private const string DFA9_eotS =
			"\x5\xFFFF";
		private const string DFA9_eofS =
			"\x5\xFFFF";
		private const string DFA9_minS =
			"\x2\x2E\x3\xFFFF";
		private const string DFA9_maxS =
			"\x1\x39\x1\x65\x3\xFFFF";
		private const string DFA9_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA9_specialS =
			"\x5\xFFFF}>";
		private static readonly string[] DFA9_transitionS =
			{
				"\x1\x2\x1\xFFFF\xA\x1",
				"\x1\x3\x1\xFFFF\xA\x1\xB\xFFFF\x1\x4\x1F\xFFFF\x1\x4",
				"",
				"",
				""
			};

		private static readonly short[] DFA9_eot = DFA.UnpackEncodedString(DFA9_eotS);
		private static readonly short[] DFA9_eof = DFA.UnpackEncodedString(DFA9_eofS);
		private static readonly char[] DFA9_min = DFA.UnpackEncodedStringToUnsignedChars(DFA9_minS);
		private static readonly char[] DFA9_max = DFA.UnpackEncodedStringToUnsignedChars(DFA9_maxS);
		private static readonly short[] DFA9_accept = DFA.UnpackEncodedString(DFA9_acceptS);
		private static readonly short[] DFA9_special = DFA.UnpackEncodedString(DFA9_specialS);
		private static readonly short[][] DFA9_transition;

		static DFA9()
		{
			int numStates = DFA9_transitionS.Length;
			DFA9_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA9_transition[i] = DFA.UnpackEncodedString(DFA9_transitionS[i]);
			}
		}

		public DFA9( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 9;
			this.eot = DFA9_eot;
			this.eof = DFA9_eof;
			this.min = DFA9_min;
			this.max = DFA9_max;
			this.accept = DFA9_accept;
			this.special = DFA9_special;
			this.transition = DFA9_transition;
		}

		public override string Description { get { return "75:1: DOUBLE : ( ( '0' .. '9' )+ '.' ( '0' .. '9' )* ( EXPONENT )? | '.' ( '0' .. '9' )+ ( EXPONENT )? | ( '0' .. '9' )+ EXPONENT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA16 : DFA
	{
		private const string DFA16_eotS =
			"\x2\xFFFF\x1\x26\x1\x2E\x3\x26\x2\xFFFF\x2\x26\x2\xFFFF\x3\x26\x1\x3D"+
			"\x1\x3F\x3\x26\x2\xFFFF\x1\x26\x4\xFFFF\x3\x26\x1\xFFFF\x4\x26\x3\xFFFF"+
			"\x1\x50\x3\xFFFF\x1\x26\x3\xFFFF\x8\x26\x1\xFFFF\x4\x26\x4\xFFFF\x1\x5E"+
			"\x5\x26\x2\xFFFF\x8\x26\x1\xFFFF\x8\x26\x1\x74\x2\x26\x1\x77\x1\x26\x1"+
			"\xFFFF\x1\x79\x1\x7A\x4\x26\x1\x7F\x6\x26\x1\x86\x1\x26\x1\x88\x1\x89"+
			"\x1\x8A\x1\x26\x1\x8C\x1\x8D\x1\xFFFF\x1\x8E\x1\x26\x1\xFFFF\x1\x26\x2"+
			"\xFFFF\x2\x26\x1\x93\x1\x26\x1\xFFFF\x1\x26\x1\x96\x1\x97\x1\x98\x1\x26"+
			"\x1\x9A\x1\xFFFF\x1\x9B\x3\xFFFF\x1\x26\x3\xFFFF\x1\x9D\x1\x26\x1\x9F"+
			"\x1\x26\x1\xFFFF\x2\x26\x3\xFFFF\x1\x26\x2\xFFFF\x1\xA4\x1\xFFFF\x1\x26"+
			"\x1\xFFFF\x2\x26\x1\xA8\x1\x26\x1\xFFFF\x1\x26\x1\xAB\x1\xAC\x1\xFFFF"+
			"\x2\x26\x2\xFFFF\x5\x26\x1\xB5\x2\x26\x1\xFFFF\x2\x26\x1\xBA\x1\xBB\x2"+
			"\xFFFF";
		private const string DFA16_eofS =
			"\xBC\xFFFF";
		private const string DFA16_minS =
			"\x1\x9\x1\xFFFF\x1\x52\x1\x2D\x1\x65\x1\x4F\x1\x68\x2\xFFFF\x1\x6F\x1"+
			"\x2B\x2\xFFFF\x1\x2B\x1\x61\x1\x55\x1\x3E\x1\x3D\x1\x66\x1\x65\x1\x61"+
			"\x2\xFFFF\x1\x41\x2\xFFFF\x1\x3E\x1\xFFFF\x1\x52\x1\x65\x1\x74\x1\xFFFF"+
			"\x1\x68\x1\x59\x1\x41\x1\x68\x3\xFFFF\x1\x2E\x3\xFFFF\x1\x47\x3\xFFFF"+
			"\x1\x67\x1\x6F\x1\x44\x1\x61\x1\x75\x1\x69\x1\x64\x1\x30\x1\xFFFF\x1"+
			"\x50\x1\x6C\x1\x6E\x1\x4E\x4\xFFFF\x1\x30\x4\x74\x1\x4D\x2\xFFFF\x1\x4F"+
			"\x1\x63\x1\x72\x1\x65\x1\x75\x1\x50\x1\x4C\x1\x65\x1\xFFFF\x1\x53\x1"+
			"\x69\x1\x6C\x1\x59\x1\x72\x1\x62\x1\x66\x1\x65\x1\x30\x1\x52\x1\x73\x1"+
			"\x30\x1\x43\x1\xFFFF\x2\x30\x1\x63\x1\x61\x1\x45\x1\x47\x1\x30\x1\x69"+
			"\x1\x6E\x1\x65\x1\x45\x1\x55\x1\x6E\x1\x30\x1\x6E\x3\x30\x1\x6C\x2\x30"+
			"\x1\xFFFF\x1\x30\x1\x65\x1\xFFFF\x1\x54\x2\xFFFF\x1\x68\x1\x62\x1\x30"+
			"\x1\x52\x1\xFFFF\x1\x6E\x3\x30\x1\x45\x1\x30\x1\xFFFF\x1\x30\x3\xFFFF"+
			"\x1\x65\x3\xFFFF\x1\x30\x1\x49\x1\x30\x1\x6C\x1\xFFFF\x1\x41\x1\x67\x3"+
			"\xFFFF\x1\x5F\x2\xFFFF\x1\x30\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x65\x1\x4D"+
			"\x1\x30\x1\x44\x1\xFFFF\x1\x4E\x2\x30\x1\xFFFF\x1\x45\x1\x5F\x2\xFFFF"+
			"\x1\x46\x1\x43\x1\x4E\x1\x41\x1\x45\x1\x30\x1\x4C\x1\x46\x1\xFFFF\x1"+
			"\x4C\x1\x4E\x2\x30\x2\xFFFF";
		private const string DFA16_maxS =
			"\x1\x7C\x1\xFFFF\x1\x52\x1\x3D\x1\x6F\x1\x4F\x1\x68\x2\xFFFF\x1\x6F\x1"+
			"\x6E\x2\xFFFF\x1\x58\x1\x75\x1\x55\x1\x3E\x1\x3D\x1\x6E\x1\x65\x1\x75"+
			"\x2\xFFFF\x1\x41\x2\xFFFF\x1\x7C\x1\xFFFF\x1\x52\x1\x65\x1\x74\x1\xFFFF"+
			"\x1\x72\x1\x59\x1\x41\x1\x68\x3\xFFFF\x1\x65\x3\xFFFF\x1\x47\x3\xFFFF"+
			"\x1\x67\x1\x6F\x1\x44\x1\x61\x1\x75\x1\x73\x1\x64\x1\x39\x1\xFFFF\x1"+
			"\x50\x1\x6C\x1\x6E\x1\x4E\x4\xFFFF\x1\x7A\x4\x74\x1\x4D\x2\xFFFF\x1\x4F"+
			"\x1\x63\x1\x72\x1\x65\x1\x75\x1\x50\x1\x4C\x1\x65\x1\xFFFF\x1\x53\x1"+
			"\x69\x1\x6C\x1\x59\x1\x72\x1\x62\x1\x66\x1\x65\x1\x7A\x1\x52\x1\x73\x1"+
			"\x7A\x1\x43\x1\xFFFF\x2\x7A\x1\x63\x1\x61\x1\x45\x1\x47\x1\x7A\x1\x69"+
			"\x1\x6E\x1\x65\x1\x45\x1\x55\x1\x6E\x1\x7A\x1\x6E\x3\x7A\x1\x6C\x2\x7A"+
			"\x1\xFFFF\x1\x7A\x1\x65\x1\xFFFF\x1\x54\x2\xFFFF\x1\x68\x1\x62\x1\x7A"+
			"\x1\x52\x1\xFFFF\x1\x6E\x3\x7A\x1\x45\x1\x7A\x1\xFFFF\x1\x7A\x3\xFFFF"+
			"\x1\x65\x3\xFFFF\x1\x7A\x1\x49\x1\x7A\x1\x6C\x1\xFFFF\x1\x41\x1\x67\x3"+
			"\xFFFF\x1\x5F\x2\xFFFF\x1\x7A\x1\xFFFF\x1\x4F\x1\xFFFF\x1\x65\x1\x4D"+
			"\x1\x7A\x1\x44\x1\xFFFF\x1\x4E\x2\x7A\x1\xFFFF\x1\x45\x1\x5F\x2\xFFFF"+
			"\x1\x46\x1\x44\x1\x4E\x1\x41\x1\x45\x1\x7A\x1\x4C\x1\x46\x1\xFFFF\x1"+
			"\x4C\x1\x4E\x2\x7A\x2\xFFFF";
		private const string DFA16_acceptS =
			"\x1\xFFFF\x1\x1\x5\xFFFF\x1\x8\x1\x9\x2\xFFFF\x1\xE\x1\xF\x8\xFFFF\x1"+
			"\x1F\x1\x20\x1\xFFFF\x1\x23\x1\x24\x1\xFFFF\x1\x27\x3\xFFFF\x1\x2B\x4"+
			"\xFFFF\x1\x31\x1\x32\x1\x33\x1\xFFFF\x1\x35\x1\x37\x1\x38\x1\xFFFF\x1"+
			"\x3\x1\x1A\x1\x1C\x8\xFFFF\x1\x36\x4\xFFFF\x1\x15\x1\x1E\x1\x16\x1\x17"+
			"\x6\xFFFF\x1\x25\x1\x26\x8\xFFFF\x1\x34\xD\xFFFF\x1\x18\x15\xFFFF\x1"+
			"\xD\x2\xFFFF\x1\x12\x1\xFFFF\x1\x19\x1\x1B\x4\xFFFF\x1\x29\x6\xFFFF\x1"+
			"\x2\x1\xFFFF\x1\x6\x1\x5\x1\x7\x1\xFFFF\x1\xB\x1\xC\x1\x10\x4\xFFFF\x1"+
			"\x22\x2\xFFFF\x1\x2C\x1\x2D\x1\x2E\x1\xFFFF\x1\x30\x1\x4\x1\xFFFF\x1"+
			"\x11\x1\xFFFF\x1\x1D\x4\xFFFF\x1\xA\x3\xFFFF\x1\x2A\x2\xFFFF\x1\x21\x1"+
			"\x28\x8\xFFFF\x1\x2F\x4\xFFFF\x1\x13\x1\x14";
		private const string DFA16_specialS =
			"\xBC\xFFFF}>";
		private static readonly string[] DFA16_transitionS =
			{
				"\x1\x1F\x17\xFFFF\x1\x18\x1\x29\x2\xFFFF\x1\x15\x1\x1\x1\x2A\x1\x19"+
				"\x1\x7\x1\x16\x1\x1B\x1\xFFFF\x1\x10\x1\x28\x1\x8\xA\x27\x1\x24\x1\x25"+
				"\x1\x3\x1\xC\x1\x11\x2\xFFFF\x1\x2\x1\x5\x2\x26\x1\xD\x1\xF\x7\x26\x1"+
				"\x17\x1\x26\x1\x1C\x3\x26\x1\x21\x1\x26\x1\x22\x4\x26\x1\xB\x3\xFFFF"+
				"\x1\x26\x1\xFFFF\x1\x26\x1\x4\x1\x6\x1\x9\x1\xA\x1\xE\x2\x26\x1\x12"+
				"\x2\x26\x1\x13\x1\x14\x4\x26\x1\x1D\x1\x1E\x1\x20\x2\x26\x1\x23\x3\x26"+
				"\x1\xFFFF\x1\x1A",
				"",
				"\x1\x2B",
				"\x1\x2C\xF\xFFFF\x1\x2D",
				"\x1\x2F\x9\xFFFF\x1\x30",
				"\x1\x31",
				"\x1\x32",
				"",
				"",
				"\x1\x33",
				"\x1\x37\x1\xFFFF\x1\x37\x2\xFFFF\xA\x36\x32\xFFFF\x1\x34\x1\xFFFF\x1"+
				"\x35",
				"",
				"",
				"\x1\x37\x1\xFFFF\x1\x37\x2\xFFFF\xA\x36\x1E\xFFFF\x1\x38",
				"\x1\x39\x13\xFFFF\x1\x3A",
				"\x1\x3B",
				"\x1\x3C",
				"\x1\x3E",
				"\x1\x40\x7\xFFFF\x1\x41",
				"\x1\x42",
				"\x1\x43\x13\xFFFF\x1\x44",
				"",
				"",
				"\x1\x45",
				"",
				"",
				"\x1\x47\x3D\xFFFF\x1\x46",
				"",
				"\x1\x48",
				"\x1\x49",
				"\x1\x4A",
				"",
				"\x1\x4B\x9\xFFFF\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"",
				"",
				"",
				"\x1\x28\x1\xFFFF\xA\x27\xB\xFFFF\x1\x28\x1F\xFFFF\x1\x28",
				"",
				"",
				"",
				"\x1\x51",
				"",
				"",
				"",
				"\x1\x52",
				"\x1\x53",
				"\x1\x54",
				"\x1\x55",
				"\x1\x56",
				"\x1\x57\x9\xFFFF\x1\x58",
				"\x1\x59",
				"\xA\x36",
				"",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\x1\x5D",
				"",
				"",
				"",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"",
				"",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"\x1\x6B",
				"",
				"\x1\x6C",
				"\x1\x6D",
				"\x1\x6E",
				"\x1\x6F",
				"\x1\x70",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x75",
				"\x1\x76",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x78",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x7B",
				"\x1\x7C",
				"\x1\x7D",
				"\x1\x7E",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x80",
				"\x1\x81",
				"\x1\x82",
				"\x1\x83",
				"\x1\x84",
				"\x1\x85",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x87",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x8B",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x8F",
				"",
				"\x1\x90",
				"",
				"",
				"\x1\x91",
				"\x1\x92",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x94",
				"",
				"\x1\x95",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x99",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"",
				"",
				"\x1\x9C",
				"",
				"",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\x9E",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\xA0",
				"",
				"\x1\xA1",
				"\x1\xA2",
				"",
				"",
				"",
				"\x1\xA3",
				"",
				"",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"\x1\xA5",
				"",
				"\x1\xA6",
				"\x1\xA7",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\xA9",
				"",
				"\x1\xAA",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				"\x1\xAD",
				"\x1\xAE",
				"",
				"",
				"\x1\xAF",
				"\x1\xB0\x1\xB1",
				"\x1\xB2",
				"\x1\xB3",
				"\x1\xB4",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\x1\xB6",
				"\x1\xB7",
				"",
				"\x1\xB8",
				"\x1\xB9",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"\xA\x26\x7\xFFFF\x1A\x26\x4\xFFFF\x1\x26\x1\xFFFF\x1A\x26",
				"",
				""
			};

		private static readonly short[] DFA16_eot = DFA.UnpackEncodedString(DFA16_eotS);
		private static readonly short[] DFA16_eof = DFA.UnpackEncodedString(DFA16_eofS);
		private static readonly char[] DFA16_min = DFA.UnpackEncodedStringToUnsignedChars(DFA16_minS);
		private static readonly char[] DFA16_max = DFA.UnpackEncodedStringToUnsignedChars(DFA16_maxS);
		private static readonly short[] DFA16_accept = DFA.UnpackEncodedString(DFA16_acceptS);
		private static readonly short[] DFA16_special = DFA.UnpackEncodedString(DFA16_specialS);
		private static readonly short[][] DFA16_transition;

		static DFA16()
		{
			int numStates = DFA16_transitionS.Length;
			DFA16_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA16_transition[i] = DFA.UnpackEncodedString(DFA16_transitionS[i]);
			}
		}

		public DFA16( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 16;
			this.eot = DFA16_eot;
			this.eof = DFA16_eof;
			this.min = DFA16_min;
			this.max = DFA16_max;
			this.accept = DFA16_accept;
			this.special = DFA16_special;
			this.transition = DFA16_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( AND | ARGS | ASSIGN | BEGIN | BODY | BOOL_KW | CHAR_KW | CLOSE_BR | DIV | DOUBLE_KW | ELIF | ELSE | END | ENTRY_POINT | EQ | EXPR | FALSE | FUN | FUNCTION_CALL | FUNCTION_DEFN | FUN_DEF | GE | GT | IF | INT_KW | LE | LET | LT | MATCH | MINUS | MOD | MULT | MUTABLE | NAME | NEQ | OPEN_BR | OR | PIPE | PLUS | PROGRAM | REC | STRING_KW | TAB | THEN | TRUE | TYPE | VALUE_DEFN | WHEN | T__63 | T__64 | ID | INT | DOUBLE | EXPONENT | STRING | CHAR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion

}

} // namespace  fsharp_ss 
